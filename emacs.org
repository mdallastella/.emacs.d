#+TITLE: Emacs configuration
#+AUTHOR: Marco Dalla Stella
#+EMAIL: marco@dallastella.name
#+STARTUP: overview

* Emacs literal configuration
  I like to keep my configuration in a [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] way, thanks to
  [[https://orgmode.org/worg/org-contrib/babel/intro.html][org-babel]].


* General settings
** User details
   My personal details.

   #+begin_src emacs-lisp :results output silent
     (setq user-full-name "Marco Dalla Stella")
     (setq user-mail-address "marco@dallastella.name")
   #+end_src

** Shell environment
   Ensure environment variables inside Emacs look the same as in the user's
   shell. Also, load keychain environment variables.

   #+begin_src emacs-lisp :results output silent
     (use-package exec-path-from-shell
       :ensure t
       :config
       (setq exec-path-from-shell-variables '("PATH")
             exec-path-from-shell-arguments '("-l"))
       (exec-path-from-shell-initialize))

     (use-package keychain-environment
       :ensure t
       :init (keychain-refresh-environment))
   #+end_src

** Various minor settings
*** Delete the selection instead of insert

    #+begin_src emacs-lisp :results output silent
      (use-package delsel
        :init (delete-selection-mode))
    #+end_src

*** Save point position in files

    #+begin_src emacs-lisp :results output silent
      (use-package saveplace
        :init (save-place-mode 1))
    #+end_src
    
*** Kill ring features
    More killed items, no duplicates in kill ring.

    #+begin_src emacs-lisp :results output silent
      (setq kill-ring-max 200
            kill-do-not-save-duplicates t)
    #+end_src

*** Auto-save buffers when they lose focus.

    #+begin_src emacs-lisp :results output silent
      (use-package super-save
        :ensure t
        :config (super-save-mode 1))
    #+end_src

*** Bind kill-this-buffer to C-c C-k
    #+begin_src emacs-lisp :results output silent
      (global-set-key (kbd "C-x C-k") 'kill-this-buffer)
    #+end_src    

*** bind ESC to keyboard-escape-quit
    #+begin_src emacs-lisp :results output silent
      (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
    #+end_src

*** Rebind default-indent-new-line
    #+begin_src emacs-lisp :results output silent
      (global-unset-key (kbd "C-M-j"))
      (global-unset-key (kbd "M-j"))
      (global-key-binding (kbd "S-<return>") 'default-indent-new-line)
    #+end_src


* Graphics and looks
** Frame title
   Show the current buffer name and the full path of the file on the app title
   bar.

   #+begin_src emacs-lisp :results output silent
     (setq-default frame-title-format "%b (%f)")
   #+end_src

** Font setup
   I use the PragmataPro font.

   #+begin_src emacs-lisp :results output silent
     (set-face-attribute 'default nil
                         :family "PragmataPro Mono Liga"
                         :height 120)
   #+end_src

** Theme
   My current theme is solarized-dark by [[https://github.com/hlissner/emacs-doom-themes][Doom Themes]].

   #+begin_src emacs-lisp :results output silent
     (use-package doom-themes
       :ensure t
       :config
       ;; Global settings (defaults)
       (setq doom-themes-enable-bold t
             doom-themes-enable-italic t
             doom-solarized-dark-brighter-comments t
             doom-solarized-dark-brighter-text t
             doom-solarized-dark-padded-modeline 2)
       (load-theme 'doom-solarized-dark t)

       ;; Enable flashing mode-line on errors
       (doom-themes-visual-bell-config)

       ;; Corrects (and improves) org-mode's native fontification.
       (doom-themes-org-config))
   #+end_src

** Icons
   Some icons for our modern looking Emacs
   
   #+begin_src emacs-lisp :results output silent
     (use-package all-the-icons
       :ensure t)

     (use-package all-the-icons-ibuffer
       :ensure t
       :init (all-the-icons-ibuffer-mode 1))
   #+end_src

   #+RESULTS:

** Uniquify
   Set unique buffer names.

   #+begin_src emacs-lisp :results output silent
     (use-package uniquify
       :config
       (setq uniquify-buffer-name-style 'post-forward
	   uniquify-separator ":"))

   #+end_src

** Window margins
   I like to have some space on the left and right edge of the window
   #+begin_src emacs-lisp :results output silent
     (setq-default left-margin-width 4
                   right-margin-width 4)
     (set-fringe-mode 10)
   #+end_src
   
** Doom mode line
   [[https://github.com/seagle0128/doom-modeline][doom-modeline]] - A fancy and fast mode-line inspired by minimalism design.

   #+begin_src emacs-lisp :results output silent
     (use-package minions
       :ensure t
       :init (minions-mode)
       :config (setq minions-direct '(cider-mode)))

     (use-package doom-modeline
       :ensure t
       :hook (after-init . doom-modeline-mode)
       :config (setq doom-modeline-buffer-file-name-style 'buffer-name
		     doom-modeline-minor-modes t
		     doom-modeline-mu4e t
		     doom-modeline-modal-icon nil))
   #+end_src

** Perspectives
   The [[https://github.com/nex3/perspective-el][Perspective]] package provides multiple named workspace (or
   "perspectives") in Emacs, similar to multiple desktops in window managers
   like Awesome and XMonad, and Spaces on the Mac.

   #+begin_src emacs-lisp :results output silent
     (use-package perspective
       :ensure t
       :config (progn
		 (persp-mode 1)
		 (setq persp-state-default-file "~/.emacs.d/default-persp")
		 (persp-state-load persp-state-default-file)))
   #+end_src

** Show matching parenthesis 

   #+begin_src emacs-lisp :results output silent
     (show-paren-mode t)

     (use-package rainbow-delimiters
       :ensure t
       :hook ((prog-mode cider-repl-mode) . rainbow-delimiters-mode))
   #+end_src

** Prettify symbols

   #+begin_src emacs-lisp :results output silent
     (global-prettify-symbols-mode 1)
   #+end_src

** Which-key
   [[https://github.com/justbur/emacs-which-key][Which-key]] – Emacs package that displays available keybindings in popup.

   #+begin_src emacs-lisp :results output silent
     (use-package which-key
       :ensure t
       :init (which-key-mode)
       :config (setq which-key-idle-delay 1
		     which-key-sort-order 'which-key-prefix-then-key-order))
   #+end_src

** Minibuffer settings
*** Never use dialogs for minibuffer input and store more history

    #+begin_src emacs-lisp :results output silent
      (setq use-dialog-box nil
            history-length 1000)
    #+end_src

*** Save minibuffer history

    #+begin_src emacs-lisp :results output silent
      (use-package savehist
        :init (savehist-mode t)
        :config (setq savehist-save-minibuffer-history t
                      savehist-autosave-interval 180))
    #+end_src

*** Recursive minibuffer
    Make the minibuffer much more useful by enabling recursive usage.
    
    #+begin_src emacs-lisp :results output silent
      (setq enable-recursive-minibuffers t)
      (minibuffer-depth-indicate-mode 1)
    #+end_src

** Scratch settings
   Use `emacs-lisp-mode' instead of `lisp-interaction-mode' for scratch buffer.

   #+begin_src emacs-lisp :results output silent
     (setq initial-major-mode 'emacs-lisp-mode
           initial-scratch-message "")
   #+end_src

** Misc variable settings
*** I've been using Emacs for too long to need to re-enable each feature bit-by-bit.

    #+begin_src emacs-lisp :results output silent
      (setq disabled-command-function nil)
    #+end_src

*** Increase line-spacing (default 0).
    #+begin_src emacs-lisp :results output silent
      (setq-default line-spacing 0.2)
    #+end_src


* Editing settings
** Fill column and enable automatic filling in ~text-mode~.

   #+begin_src emacs-lisp :results output silent
     (setq-default fill-column 80)
     (add-hook 'text-mode-hook #'auto-fill-mode)
   #+end_src

** Tabs vs Spaces
   I have learned to distrust tabs in my source code, so let's make sure that we
   only have spaces. See [[http://ergoemacs.org/emacs/emacs_tabs_space_indentation_setup.html][this discussion]] for details.

   #+begin_src emacs-lisp :results output silent
     (setq-default indent-tabs-mode nil
                   tab-width 2)
   #+end_src

   Make tab key do indent first then completion.

   #+begin_src emacs-lisp :results output silent
     (setq-default tab-always-indent 'complete)
   #+end_src

** Jumping around
   Use [[https://github.com/abo-abo/avy][Avy]] for jumping around in a buffer.

   #+begin_src emacs-lisp :results output silent
     (use-package avy
       :ensure t
       :bind* (("C-:" . avy-goto-line)
	       ("C-;" . avy-goto-char-2)))
   #+end_src

** Easykill
   [[https://github.com/leoliu/easy-kill][Easykill]] - Better kill text.

   #+begin_src emacs-lisp :results output silent
     (use-package easy-kill
       :ensure t
       :bind (([remap kill-ring-save] . easy-kill)
	      ([remap mark-sexp]      . easy-mark)))
   #+end_src

** Highlight symbols
   [[https://github.com/wolray/symbol-overlay][symbol-overlay.el]] - Highlight symbols with overlays while providing a keymap
   for various operations about highlighted symbols.

   #+begin_src emacs-lisp :results output silent
     (use-package symbol-overlay
       :ensure t
       :bind (:map symbol-overlay-mode-map
                   ("M-n" . symbol-overlay-jump-next)
                   ("M-p" . symbol-overlay-jump-prev))
       :hook ((prog-mode html-mode css-mode) . symbol-overlay-mode))
   #+end_src
** Spell checking
*** aspell

    #+begin_src emacs-lisp :results output silent
      (use-package ispell
        :defer t
        :config (setq ispell-program-name (executable-find "aspell")
                      ispell-extra-args '("--sug-mode=ultra")
                      ispell-dictionary "en"
                      ispell-local-dictionary "en")
        (unless ispell-program-name
          (warn "No spell checker available. Please install hunspell.")))
    #+end_src

*** [[https://gitlab.com/ideasman42/emacs-spell-fu][spell-fu]] - Fast highlighting of misspelled words.

    #+begin_src emacs-lisp :results output silent
      (use-package spell-fu
        :ensure t
        :hook ((prog-mode text-mode) . spell-fu-mode))
    #+end_src

** Multiple cursors
   [[https://github.com/magnars/multiple-cursors.el][Multiple cursors for emacs.]]

   #+begin_src emacs-lisp :results output silent
     (use-package multiple-cursors
       :ensure t
       :bind* (("C-c m n" . mc/mark-next-like-this)
               ("C-c m p" . mc/mark-previous-like-this)
               ("C-c m a" . mc/mark-all-like-this)
               ("C-c m >" . mc/edit-lines)))
   #+end_src

** undo-fu
   [[https://gitlab.com/ideasman42/emacs-undo-fu][Undo Fu]] - Simple, stable undo with redo for emacs.

   #+begin_src emacs-lisp :results output silent
     (use-package undo-fu
       :ensure t
       :bind* (("C-z" . undo-fu-only-undo)
               ("C-S-z" . undo-fu-only-redo)))
   #+end_src


* Tools
** Vertico, Consult, Embark and Marginalia 
*** Vertico

    #+begin_src emacs-lisp :results output silent
      (use-package vertico
        :ensure t
        :init
        (vertico-mode))

      (use-package orderless
        :ensure t
        :init
        (setq completion-styles '(orderless)
              completion-category-defaults nil
              completion-category-overrides '((file (styles . (partial-completion))))))
    #+end_src

*** Embark, Consult and Marginalia

    #+begin_src emacs-lisp :results output silent
      (use-package marginalia
        :ensure t
        :config
        (marginalia-mode))

      (use-package consult
        :ensure t
        :bind* (("C-c c l" . consult-line)
                ("C-c c b" . consult-buffer)
                ("C-c c r" . consult-ripgrep)
                ("C-c c g" . consult-goto-line)
                ("M-y" . consult-yank-from-kill-ring))
        :config (setq consult-project-root-function #'projectile-project-root))

      (use-package embark
        :ensure t
        :bind* ("s-'" . embark-act)
        :config (setq embark-action-indicator
                      (lambda (map _target)
                        (which-key--show-keymap "Embark" map nil nil 'no-paging)
                        #'which-key--hide-popup-ignore-command)
                      embark-become-indicator embark-action-indicator))

      ;; Consult users will also want the embark-consult package.
      (use-package embark-consult
        :ensure t
        :after (embark consult)
        :demand t
        :hook (embark-collect-mode . consult-preview-at-point-mode))
    #+end_src

** Crux
   [[https://github.com/bbatsov/crux][crux]] - A Collection of Ridiculously Useful eXtensions for Emacs.

   #+begin_src emacs-lisp :results output silent
     (use-package crux
       :ensure t
       :bind* (("C-^" . crux-top-join-line)
               ("M-o" . crux-smart-open-line)
               ("M-O" . crux-smart-open-line-above))
       :config
       (setq save-abbrevs 'silently)
       (setq-default abbrev-mode t))
   #+end_src

** Flycheck
   [[http://www.flycheck.org][Flycheck]] automatically checks buffers for errors while you type, and reports
   warnings and errors directly in the buffer and in an optional IDE-like error
   list.

   #+begin_src emacs-lisp :results output silent
     (use-package flycheck
       :ensure t
       :hook (prog-mode . flycheck-mode)
       :config
       (setq flycheck-standard-error-navigation nil
             flycheck-display-errors-function
             #'flycheck-display-error-messages-unless-error-list))
   #+end_src

** Projectile
   Projectile is a project interaction library for Emacs. Its goal is to provide
   a nice set of features operating on a project level without introducing
   external dependencies (when feasible).

   #+begin_src emacs-lisp :results output silent
     (use-package projectile
       :ensure t
       :bind
       (:map projectile-mode-map
             ("C-c p" . projectile-command-map))
       :init
       (setq projectile-find-dir-includes-top-level t
             projectile-switch-project-action #'projectile-find-file
             projectile-sort-order 'recentf
             projectile-completion-system 'default)
       (projectile-mode t))
   #+end_src

** Magit configuration
   [[https://github.com/magit/magit][Magit]] - A Git porcelain inside Emacs.

   #+begin_src emacs-lisp :results output silent
     (use-package magit
       :ensure t
       :bind (("C-c v c" . magit-clone)
              ("C-c v C" . magit-checkout)
              ("C-c v d" . magit-dispatch)
              ("C-c v g" . magit-blame)
              ("C-c v l" . magit-log-buffer-file)
              ("C-c v p" . magit-pull)
              ("C-c v v" . magit-status)
              ("C-c v f" . magit-fetch-all)
              ("C-c v R" . vc-refresh-state))
       :config (setq magit-save-repository-buffers 'dontask
                     magit-refs-show-commit-count 'all))
   #+end_src

   [[https://github.com/magit/forge][Forge]] - Work with Git forges from the comfort of Magit

#+begin_src emacs-lisp :results output silent
  (use-package forge
    :ensure t
    :after magit)
#+end_src

** diff-hl
   [[https://github.com/dgutov/diff-hl][diff-hl-mode]] highlights uncommitted changes on the left side of the window,
   allows you to jump between and revert them selectively.

   #+begin_src emacs-lisp :results output silent
     (use-package diff-hl
       :ensure t
       :config (add-hook 'magit-post-refresh-hook
                         'diff-hl-magit-post-refresh)
       :init
       (diff-hl-dired-mode)
       (global-diff-hl-mode))
   #+end_src

** TODO Smartparens
   Smartparens - Minor mode for Emacs that deals with parens pairs and tries to
   be smart about it.

   #+begin_src emacs-lisp :results output silent
     (use-package smartparens
       :ensure t
       :bind (:map smartparens-mode-map
                   ("M-R" . sp-raise-sexp))
       :config (require 'smartparens-config)
       (setq sp-highlight-pair-overlay t
             sp-highlight-wrap-overlay t
             sp-highlight-wrap-tag-overlay t
             sp-show-pair-from-inside t)
       (sp-use-smartparens-bindings)
       :init (smartparens-global-strict-mode t))
   #+end_src

** Direnv
   direnv integration for emacs.

   #+begin_src emacs-lisp :results output silent
     (use-package direnv
       :ensure t
       :config (direnv-mode))
   #+end_src

** wgrep
   [[https://github.com/mhayashi1120/Emacs-wgrep][wgrep.el]] - allows you to edit a grep buffer and apply those changes to the
   file buffer.

   #+begin_src emacs-lisp :results output silent
     (use-package wgrep
       :ensure t)
   #+end_src

** ace-windows
   [[https://github.com/abo-abo/ace-window][ace-windows]] - GNU Emacs package for selecting a window to switch to

   #+begin_src emacs-lisp :results output silent
     (use-package ace-window
       :ensure t
       :config (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
       :bind* ("C-x o" . ace-window))
   #+end_src

** Paradox
   [[https://github.com/Malabarba/paradox][Malabarba/paradox: Project for modernizing Emacs' Package Menu.]]

#+begin_src emacs-lisp :results output silent :results output silent
  (use-package paradox
    :ensure t
    :config (setq paradox-github-token paradox-gh-token)
    :bind* (("C-c c p" . paradox-list-packages)
            ("C-c c P" . paradox-upgrade-packages))
    :init (paradox-enable))
#+end_src

** dumb-jump
   [[https://github.com/jacktasia/dumb-jump][dumb-jump: an Emacs "jump to definition".]]

#+begin_src emacs-lisp :results output silent
  (use-package dumb-jump
    :ensure t
    :init (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
#+end_src


* Productivity
** org-mode
*** org settings
    #+begin_src emacs-lisp :results output silent
      (use-package org
        :ensure t
        :bind* (("C-c o t" . 'org-capture)
                ("C-c o a" . 'org-agenda)
                ("C-c o r" . 'org-refile))
        :config (setq org-agenda-files (list "~/org/")
                      org-default-notes-file "inbox.org"
                      org-todo-keywords '((sequence "TODO" "NEXT" "HOLD" "|" "DONE" "CANCEL"))
                      org-log-done t
                      org-archive-location "~/org/archive.org::datatree/"
                      org-archive-mark-done t
                      org-hide-emphasis-markers t
                      org-ellipsis " ↴"
                      org-src-fontify-natively t
                      org-src-window-setup 'current-window
                      org-fontify-quote-and-verse-blocks t
                      org-confirm-babel-evaluate nil
                      org-refile-targets '((org-agenda-files :maxlevel . 1))
                      org-refile-allow-creating-parent-nodes 'confirm))
    #+end_src

*** org-bullets
    Pretty bullets instead of asterisks.

    #+begin_src emacs-lisp :results output silent
      (use-package org-bullets
        :ensure t
        :hook (org-mode . org-bullets-mode)
        :config (setq org-bullets-bullet-list '("◉" "○" "●" "►" "◇" "◎")))
    #+end_src

*** org-cliplink
    #+begin_src emacs-lisp :results output silent
      (use-package org-cliplink
        :ensure t
        :bind ("C-c o i" . org-cliplink))
    #+end_src

*** org-mru-clock

    [[https://github.com/unhammer/org-mru-clock][org-mru-clock]] - Pre-fill your clock history with clocks from your agenda
    files (and other open org files) so you can clock in to your most recent
    clocks regardless of whether you just started Emacs or have had it running
    for decades.

    #+begin_src emacs-lisp :results output silent
      (use-package org-mru-clock
        :ensure t
        :bind* (("C-c o i" . org-mru-clock-in)
                ("C-c o j" . org-mru-clock-select-recent-task)
                ("C-c o o" . org-clock-out))
        :init (setq org-mru-clock-how-many 25
                    org-mru-clock-files #'org-agenda-files))
    #+end_src

*** org-notifications
    [[https://github.com/doppelc/org-notifications][org-notifications]] - Creates system notifications for org-agenda items with
    timestamps

    #+begin_src emacs-lisp :results output silent
      (use-package org-notifications
        :ensure t
        :config (org-notifications-start))
    #+end_src

*** yankpad
    [[https://github.com/Kungsgeten/yankpad][GitHub - Kungsgeten/yankpad: Paste snippets from an org-mode file]]

    #+begin_src emacs-lisp :results output silent
      (use-package yasnippet
        :ensure t
        :config
        (setq yas-verbosity 1)
        (yas-global-mode))

      (use-package yankpad
        :ensure t
        :after yasnippet
        :init
        (setq yankpad-file "~/org/yankpad.org")
        (bind-keys :prefix-map yank-map
                   :prefix "C-c y"
                   ("c" . yankpad-set-category)
                   ("e" . yankpad-edit)
                   ("i" . yankpad-insert)
                   ("m" . yankpad-map)
                   ("r" . yankpad-reload)
                   ("x" . yankpad-expand)))
    #+END_SRC

*** capture templates

    #+begin_src emacs-lisp :results output silent
      (setq org-capture-templates
            '(("t" "Task" entry (file "inbox.org")
               "* TODO %?\n")
              ("T" "Clockable task" entry (file+headline "inbox.org")
               "* TODO %?\n" :clock-in t :clock-keep t)
              ("j" "Journal" entry (file+olp+datetree "~/org/journal.org")
               "** %<%H:%M> %?\n")))
    #+end_src


* Coding
** Completion
   [[http://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for
   "complete anything". It uses pluggable back-ends and front-ends to retrieve
   and display completion candidates.

   #+begin_src emacs-lisp :results output silent
     (use-package company
       :ensure t
       :bind  ((:map company-active-map
                     ("C-n" . company-select-next)
                     ("C-p" . company-select-previous)))
       :hook ((cider-mode . cider-company-enable-fuzzy-completion)
              (cider-repl-mode . cider-company-enable-fuzzy-completion))
       :init (setq company-idle-delay nil
                   company-require-match nil
                   company-tooltip-align-annotations t
                   company-show-numbers nil
                   company-dabbrev-ignore-case t
                   company-dabbrev-downcase nil)
       (global-company-mode))
   #+end_src
   
** LSP
   #+begin_src emacs-lisp :results output silent
     (use-package lsp-mode
       :ensure t
       :hook ((clojure-mode . lsp)
              (clojurec-mode . lsp)
              (clojurescript-mode . lsp)
              (lsp-mode . (lambda () (setq-local idle-highlight-mode nil))))
       :custom
       (lsp-enable-file-watchers nil)
       (lsp-headerline-breadcrumb-enable nil)
       (lsp-keymap-prefix "C-c l")
       (lsp-enable-indentation nil)
       (lsp-completion-provider :none)
       (lsp-eldoc-enable-hover nil)
       :config
       (lsp-enable-which-key-integration t))
   #+end_src

** Clojure
   Clojure settings for Emacs

*** Clojure development environment

    #+begin_src emacs-lisp :results output silent
      (use-package cider
        :ensure t
        :hook  ((cider-mode . eldoc-mode)
                (clojure-mode . cider-mode)
                (clojure-mode . subword-mode)
                (cider-repl-mode . eldoc-mode)
                (cider-repl-mode . subword-mode))

        :bind (:map cider-mode-map
                    ("C-c M-l" . cider-load-all-project-ns)
                    :map cider-repl-mode-map
                    ("RET" . cider-repl-newline-and-indent)
                    ("C-RET" . cider-repl-return)
                    ("C-c C-l" . cider-repl-clear-buffer))
        :config (setq cider-offer-to-open-cljs-app-in-browser nil
                      cider-font-lock-dynamically t
                      cider-invert-insert-eval-p t
                      cider-save-file-on-load t
                      cider-repl-pop-to-buffer-on-connect 'display-only
                      cider-repl-wrap-history t
                      cider-repl-history-size 1000
                      cider-repl-history-file (locate-user-emacs-file "cider-repl-history")
                      cider-repl-display-help-banner nil))
    #+end_src

*** Clojure Flycheck
    Flycheck using clj-kondo

    #+begin_src emacs-lisp :results output silent
      (use-package flycheck-clj-kondo
        :ensure t)
    #+end_src

*** Font-locking for Clojure mode

    #+begin_src emacs-lisp :results output silent
      (use-package clojure-mode-extra-font-locking
        :ensure t
        :after clojure-mode)
    #+end_src

*** Client for Clojure nREPL

    #+begin_src emacs-lisp :results output silent
      (use-package nrepl-client
        :after cider
        :config (setq nrepl-hide-special-buffers t))
    #+end_src

*** Clojure LSP

*** Kaocha test runner
    An emacs package for running Kaocha tests via CIDER.

    #+begin_src emacs-lisp :results output silent
      (use-package kaocha-runner
        :ensure t
        :after cider
        :bind (:map clojure-mode-map
                    ("C-c k a" . kaocha-runner-run-all-tests)
                    ("C-c k h" . kaocha-runner-hide-windows)
                    ("C-c k r" . kaocha-runner-run-tests)
                    ("C-c k t" . kaocha-runner-run-test-at-point)
                    ("C-c k w" . kaocha-runner-show-warnings))
        :config (setq kaocha-runner-failure-win-min-height 20
                      kaocha-runner-ongoing-tests-win-min-height 20
                      kaocha-runner-output-win-max-height 20))
    #+end_src

** Common Lisp
   Common Lisp settings

   #+begin_src emacs-lisp :results output silent
     ;; (use-package sly
     ;;   :ensure t
     ;;   :config (setq inferior-lisp-program "/usr/bin/sbcl"))

     ;; (use-package sly-quicklisp
     ;;   :ensure t)
   #+end_src

** Web Development
   I use web-mode, css-mode and js2 for web development.

*** web-mode

    #+begin_src emacs-lisp :results output silent
      (use-package web-mode
        :ensure t
        :mode "\\.html\\'"
        :config
        (setq web-mode-markup-indent-offset 2
              web-mode-css-indent-offset 2
              web-mode-code-indent-offset 2))
    #+end_src

*** js2 - A better JavaScript support

    #+begin_src emacs-lisp :results output silent
      (use-package js2-mode
        :ensure t
        :mode "\\.js\\'"
        :hook (js2-mode . js2-highlight-unused-variables-mode)
        :config (setq-default js2-basic-offset 2))
    #+end_src

*** Better CSS support

    #+begin_src emacs-lisp :results output silent
      (use-package css-mode
        :ensure t
        :mode "\\.css\\'"
        :hook (css-mode-hook . (lambda () (run-hooks 'prog-mode-hook)))
        :config (setq css-indent-offset 2))
    #+end_src

*** Eldoc for CSS.

    #+begin_src emacs-lisp :results output silent
      (use-package css-eldoc
        :ensure t
        :hook (css-mode . turn-on-css-eldoc)
        :commands (turn-on-css-eldoc))
    #+end_src

*** JSON specific mode.

    #+begin_src emacs-lisp :results output silent
      (use-package json-mode                  ; JSON editing
        :ensure t
        :mode "\\.json\\'")
    #+end_src

** Janet
   [[https://janet-lang.org][Janet]] is a functional and imperative programming language.

   #+begin_src emacs-lisp :results output silent
     (use-package janet-mode
       :ensure t
       :mode ("\\.janet\\'" . janet-mode))
   #+end_src

** LUA

   #+begin_src emacs-lisp :results output silent
     (use-package lua-mode
       :ensure t
       :defer t
       :mode ("\\.lua" . lua-mode)
       :config
       (setq lua-indent-level 2))
   #+end_src

** Fennel
   [[https://fennel-lang.org/][Fennel]] is a programming language that brings together the speed, simplicity,
   and reach of Lua with the flexibility of a lisp syntax and macro system.

   #+begin_src emacs-lisp :results output silent
     (use-package fennel-mode
       :ensure t
       :mode ("\\.fnl" . fennel-mode))
   #+end_src

** YAML
   Editing YAML files.

   #+begin_src emacs-lisp :results output silent
     (use-package yaml-mode
       :ensure t
       :defer t)
   #+end_src


* Stuff
** Smudge
   [[https://github.com/danielfm/smudge][Smudge]] - Control Spotify app from within Emacs.

   #+begin_src emacs-lisp :results output silent
     (use-package smudge
       :ensure t
       :config
       (setq smudge-oauth2-client-id spotify-client-id
             smudge-oauth2-client-secret spotify-client-secret
             smudge-status-location nil)
       (define-key smudge-mode-map (kbd "C-c .") 'smudge-command-map)
       :init (global-smudge-remote-mode))
   #+end_src


* BEERWARE LICENSE
  "THE BEER-WARE LICENSE" (Revision 42): <marco@dallastella.name> wrote this
  file. As long as you retain this notice you can do whatever you want with this
  stuff. If we meet some day, and you think this stuff is worth it, you can buy me
  a beer in return.
