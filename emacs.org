#+TITLE: Emacs configuration
#+AUTHOR: Marco Dalla Stella
#+EMAIL: marco@dallastella.name

* Emacs literal configuration
  I like to keep my cofiguration in a [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] way, thanks to [[https://orgmode.org/worg/org-contrib/babel/intro.html][org-babel]].


* General settings
** User details
   My personal details.

#+begin_src emacs-lisp
  (setq user-full-name "Marco Dalla Stella")
  (setq user-mail-address "marco@dallastella.name")
#+end_src

** Shell environment
   Ensure environment variables inside Emacs look the same as in the user's
   shell. Also, load keychain environment variables.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (setq exec-path-from-shell-variables '("PATH")
	  exec-path-from-shell-arguments '("-l"))
    (exec-path-from-shell-initialize))

  (use-package keychain-environment
    :ensure t
    :init
    (keychain-refresh-environment))
#+end_src

** Various minor settings
*** Delete the selection instead of insert

#+begin_src emacs-lisp
  (use-package delsel
    :init (delete-selection-mode))
#+end_src

*** Save point position in files

#+begin_src emacs-lisp
  (use-package saveplace
    :init (save-place-mode 1))
#+end_src

*** Auto-revert buffers of changed files

#+begin_src emacs-lisp
  (use-package autorevert
    :init (global-auto-revert-mode)
    :config
    (setq auto-revert-verbose nil
	  ;; Revert Dired buffers, too
	  global-auto-revert-non-file-buffers t))
#+end_src

*** Kill ring features

    More killed items, no duplicates in kill ring.

#+begin_src emacs-lisp
  (setq kill-ring-max 200
	kill-do-not-save-duplicates t)
#+end_src

*** Auto-save buffers when they lose focus.

#+begin_src emacs-lisp
  (use-package super-save
    :ensure t
    :config (super-save-mode 1))
#+end_src

*** [[https://github.com/Malabarba/paradox][paradox]] - A better package manager interface.

#+begin_src emacs-lisp
  (use-package paradox
    :ensure t
    :bind (("C-c c p" . paradox-list-packages)
	   ("C-c c P" . paradox-upgrade-packages))
    :config (setq paradox-github-token t             ; Don't ask for a token
		  paradox-execute-asynchronously nil ; No async updates
		  paradox-use-homepage-buttons nil   ; Hide download button
		  paradox-automatically-star nil     ; Don't star packages automatically
		  paradox-display-download-count t   ; Show all possible counts
		  paradox-display-star-count t))
#+end_src


* Graphics and looks
** Frame title
   Show the current buffer name and the full path of the file on the app title
   bar.

#+begin_src emacs-lisp
  (setq-default frame-title-format "%b (%f)")
#+end_src


** Font setup
   I use the Victor Mono font.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
		      :family "Victor Mono"
		      :weight 'light
		      :italic nil
		      :height 130)

  (set-face-italic-p 'italic nil)
#+end_src

** Theme
   My favorite theme is solarized dark.

#+begin_src emacs-lisp
  (use-package solarized-theme
    :ensure t
    :config (setq solarized-use-variable-pitch nil
		  solarized-scale-org-headlines nil
		  solarized-use-less-bold t
		  solarized-use-more-italic nil
		  x-underline-at-descent-line t)
    (load-theme 'solarized-dark-high-contrast 'no-confirm)
    (let ((line (face-attribute 'mode-line :underline)))
      (set-face-attribute 'mode-line nil :overline line)
      (set-face-attribute 'mode-line-inactive nil :overline line)
      (set-face-attribute 'mode-line-inactive nil :underline line)
      (set-face-attribute 'mode-line nil :box nil)
      (set-face-attribute 'mode-line-inactive nil :box nil)))
#+end_src

** Uniquify
   Set unique buffer names.

#+begin_src emacs-lisp
  (use-package uniquify
    :config (setq uniquify-buffer-name-style 'post-forward
		  uniquify-separator ":"))
#+end_src

** Remove menus, bars and everything that's annoying
   I don't like scrollbars nor bars. I've been using Emacs for many years, and
   appreciate a certain minimalist approach to its display.

#+begin_src emacs-lisp
  (setq initial-scratch-message "")
  (when (window-system)
    (tool-bar-mode -1)
    (when (fboundp 'horizontal-scroll-bar-mode)
      (horizontal-scroll-bar-mode -1))
    (blink-cursor-mode -1)
    (scroll-bar-mode -1)
    (tooltip-mode -1)
    (menu-bar-mode -1))
#+end_src


** Disable annoying prompts and messages

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)

  (setq ring-bell-function #'ignore
	inhibit-startup-screen t
	initial-scratch-message nil)

  (fset 'display-startup-echo-area-message #'ignore)
#+end_src


** Mode line
   Custom mode-line and [[https://github.com/tarsius/minions][minions]].

*** Show current column and line

#+begin_src emacs-lisp
  (column-number-mode t)
  (line-number-mode t)
#+end_src

*** mode-line

#+begin_src emacs-lisp
  (setq-default mode-line-format
		'("%e"
		  mode-line-misc-info
		  mode-line-front-space
		  mode-line-mule-info
		  mode-line-client
		  mode-line-modified
		  mode-line-remote
		  mode-line-frame-identification
		  mode-line-buffer-identification " " mode-line-position
		  (vc-mode vc-mode)
		  " " mode-line-modes
		  mode-line-end-spaces))
#+end_src

*** minions

#+begin_src emacs-lisp
  (use-package minions
    :ensure t
    :init (minions-mode)
    :config (setq minions-direct '(cider-mode)))
#+end_src


** Eyebrowse
   [[https://github.com/wasamasa/eyebrowse][Eyebrowse]] - A simple-minded way of managing window configs in emacs

#+begin_src emacs-lisp
    (use-package eyebrowse
      :ensure t
      :config (setq eyebrowse-switch-back-and-forth t
		    eyebrowse-wrap-around t
		    eyebrowse-new-workspace t
		    eyebrowse-mode-line-style t)
      (eyebrowse-mode t))
#+end_src


** Show matching parenthesis

#+begin_src emacs-lisp
  (show-paren-mode t)

  (use-package rainbow-delimiters
    :ensure t
    :hook ((prog-mode cider-repl-mode) . rainbow-delimiters-mode))
#+end_src

** Prettify symbols

#+begin_src emacs-lisp
  (global-prettify-symbols-mode 1)
#+end_src

** Minibuffer settings
   Allow to read from the minibuffer while in minibuffer

#+begin_src emacs-lisp
  (setq enable-recursive-minibuffers t)
#+end_src

   Show the minibuffer depth (when larger than 1).

#+begin_src emacs-lisp
  (minibuffer-depth-indicate-mode 1)
#+end_src

   Never use dialogs for minibuffer input and store more history.

#+begin_src emacs-lisp
  (setq use-dialog-box nil
	history-length 1000)
#+end_src

   Save minibuffer history.

#+begin_src emacs-lisp
  (use-package savehist
    :init (savehist-mode t)
    :config (setq savehist-save-minibuffer-history t
		  savehist-autosave-interval 180))
#+end_src

** Scratch settings
   Use `emacs-lisp-mode' instead of `lisp-interaction-mode' for scratch buffer.

#+begin_src emacs-lisp
  (setq initial-major-mode 'emacs-lisp-mode)
#+end_src

** Which-key
   [[https://github.com/justbur/emacs-which-key][Which-key]] – Emacs package that displays available keybindings in popup.

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init (which-key-mode)
    :config (setq which-key-idle-delay 0.4
		  which-key-sort-order 'which-key-prefix-then-key-order))
#+end_src



* Editing settings

** Evil mode - Disabled for now
   [[https://github.com/emacs-evil/evil][Evil]] - Evil is an extensible vi layer for Emacs.

#+begin_src emacs-lisp
  ;; (use-package evil
  ;;   :ensure t
  ;;   :init (evil-mode 1))
#+end_src

this is a test



** Misc variable settings
   Does anyone type =yes= anymore?

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

   Fix the scrolling to keep point in the center.

#+begin_src emacs-lisp
  (setq scroll-conservatively 10000
	scroll-preserve-screen-position t)
#+end_src

   I've been using Emacs for too long to need to re-enable each
   feature bit-by-bit.

#+begin_src emacs-lisp
  (setq disabled-command-function nil)
#+end_src

   Store more history.

#+begin_src emacs-lisp
  (setq history-length 1000)
#+end_src

   Increase line-spacing (default 0).

#+begin_src emacs-lisp
  (setq-default line-spacing 0.2)
#+end_src

   Configure a reasonable fill column and enable automatic filling in
   ~text-mode~.

#+begin_src emacs-lisp
  (setq-default fill-column 80)
  (add-hook 'text-mode-hook #'auto-fill-mode)
#+end_src



** Tabs vs Spaces
   I have learned to distrust tabs in my source code, so let's make sure that we
   only have spaces. See [[http://ergoemacs.org/emacs/emacs_tabs_space_indentation_setup.html][this discussion]] for details.

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil
                tab-width 2)
#+end_src

   Make tab key do indent first then completion.

#+begin_src emacs-lisp
  (setq-default tab-always-indent 'complete)
#+end_src



** Windows navigation
   Use Ctrl-c Ctrl-Arrow for cycle throught windows, ignoring possible errors.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c C-<left>")  'windmove-left)
  (global-set-key (kbd "C-c C-<right>") 'windmove-right)
  (global-set-key (kbd "C-c C-<up>")    'windmove-up)
  (global-set-key (kbd "C-c C-<down>")  'windmove-down)
#+end_src


** Jumping around
   Use [[https://github.com/abo-abo/avy][Avy]] for jumping around in a buffer.

#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind* (("C-:" . avy-goto-line)
            ("C-;" . avy-goto-char))
    :bind (:map isearch-mode-map
                ("C-'" . avy-isearch)))
#+end_src



** Ivy configuration
   [[http://oremacs.com/swiper/][Ivy]] is an interactive interface for completion in Emacs.

#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :bind (("C-c C-r" . ivy-resume)
           :map ivy-minibuffer-map
           ("<return>" . ivy-alt-done)
           ("C-o" . hydra-ivy/body))
    :config (setq ivy-use-virtual-buffers t
                  ivy-count-format "(%d/%d) ")
    :init (ivy-mode 1))
#+end_src

*** ivy-hydra

#+begin_src emacs-lisp
  (use-package ivy-hydra
    :ensure t
    :after ivy)
#+end_src


*** ivy-rich

#+begin_src emacs-lisp
  (use-package ivy-rich
    :ensure t
    :config (setcdr (assq t ivy-format-functions-alist)
                    #'ivy-format-function-line)
    :init (ivy-rich-mode 1))
#+end_src


*** ivy-todo
#+begin_src emacs-lisp
  (use-package ivy-todo :ensure t
    :bind ("C-c t" . ivy-todo)
    :commands ivy-todo
    :config
    (setq ivy-todo-default-tags '("PROJECT")))
#+end_src


** Amx
   [[https://github.com/DarwinAwardWinner/amx][Amx]] is an alternative interface for ~M-x~ in Emacs.

#+begin_src emacs-lisp
  (use-package amx
    :ensure t)
#+end_src

** Counsel
   Completion functions with Ivy

#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :init (counsel-mode)
    :bind (("C-c u" . counsel-unicode-char)
           ("C-c r" . counsel-rg)
           ("C-c h h" . counsel-command-history)
           ([remap execute-extended-command] . counsel-M-x)
           ([remap find-file] . counsel-find-file)
           ([remap describe-function] . counsel-describe-function)
           ([remap describe-variable] . counsel-describe-variable))
    :config (setq counsel-mode-override-describe-bindings t
                  counsel-find-file-at-point t))
#+end_src

** Completion with company
   [[http://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for
   "complete anything". It uses pluggable back-ends and front-ends to retrieve
   and display completion candidates.

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init (global-company-mode)
    :bind (:map company-active-map
                ("C-tab" . company-complete-common-or-cycle)
                ("C-n" . company-select-next)
                ("C-p" . company-select-previous))
    :config (setq company-tooltip-align-annotations t
                  company-dabbrev-ignore-case t
                  company-dabbrev-downcase nil))

  ;; Show likelier candidates on top
  (use-package company-statistics
    :ensure t
    :after company
    :config (company-statistics-mode))
#+end_src
** Aggressive indentation
   Aggressive-indent-mode is a minor mode that keeps your code always indented.
   It re-indents after every change, making it more reliable than
   `electric-indent-mode`.

#+begin_src emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :init (global-aggressive-indent-mode 1)
    :config
    ;; Free C-c C-q, used in Org and in CIDER
    (unbind-key "C-c C-q" aggressive-indent-mode-map)
    (add-to-list 'aggressive-indent-excluded-modes
                 'cider-repl-mode))
#+end_src

** Easykill
   [[https://github.com/leoliu/easy-kill][Easykill]] - Better kill text.

#+begin_src emacs-lisp
  (use-package easy-kill
    :ensure t
    :bind (([remap kill-ring-save] . easy-kill)
           ([remap mark-sexp]      . easy-mark)))
#+end_src

** Highlight symbols
   [[https://github.com/wolray/symbol-overlay][symbol-overlay.el]] - Highlight symbols with overlays while providing a keymap
   for various operations about highlighted symbols.

#+begin_src emacs-lisp
  (use-package symbol-overlay
    :ensure t
    :bind (:map symbol-overlay-mode-map
		("M-n" . symbol-overlay-jump-next)
		("M-p" . symbol-overlay-jump-prev))
    :hook ((prog-mode html-mode css-mode) . symbol-overlay-mode))
#+end_src
** Flyspell
*** Flyspell configuration using hunspell.
**** hunspell

#+begin_src emacs-lisp
  (use-package ispell
    :defer t
    :config
    (setq
     ispell-program-name (executable-find "hunspell")
     ispell-dictionary "en_US")
    (unless ispell-program-name
      (warn "No spell checker available. Please install hunspell.")))
#+end_src

**** Flyspell

#+begin_src emacs-lisp
  (use-package flyspell
    :hook
    ((prog-mode text-mode) . flyspell-prog-mode)
    :config
    (setq flyspell-use-meta-tab nil
	  ;; Make Flyspell less chatty
	  flyspell-issue-welcome-flag nil
	  flyspell-issue-message-flag nil))

   ; Better interface for corrections
   (use-package flyspell-correct-ivy
     :ensure t
     :after flyspell
     :bind
     (:map flyspell-mode-map
	   ("C-c $" . flyspell-correct-word-generic)))
#+end_src



* Tools
** Flycheck
   [[http://www.flycheck.org][Flycheck]] automatically checks buffers for errors while you type, and reports
   warnings and errors directly in the buffer and in an optional IDE-like error
   list.

#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :hook (prog-mode . flycheck-mode)
    :config
    (setq flycheck-standard-error-navigation nil
		   flycheck-display-errors-function
		   #'flycheck-display-error-messages-unless-error-list))
#+end_src

** Projectile
   Projectile is a project interaction library for Emacs. Its goal is to provide
   a nice set of features operating on a project level without introducing
   external dependencies (when feasible).

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :bind
    (:map projectile-mode-map
	  ("C-c p" . projectile-command-map))
    :init
    (projectile-mode +1)
    (setq projectile-completion-system 'ivy
	  projectile-find-dir-includes-top-level t)
    (projectile-register-project-type 'lein-cljs '("project.clj")
				      :compile "lein cljsbuild once"
				      :test "lein cljsbuild test"))
#+end_src

*** Ivy integration with Projectile

#+begin_src emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :bind (:map projectile-command-map
		("p" . counsel-projectile)
		("f" . counsel-projectile-find-file)
		("P" . counsel-projectile-switch-project)
		("r" . counsel-projectile-rg)))
#+end_src

*** Search project with ripgrep

#+begin_src emacs-lisp
  (use-package projectile-ripgrep         ; Search projects with ripgrep
    :ensure t
    :bind (:map projectile-command-map
		("s r" . projectile-ripgrep)))
#+end_src

** Magit configuration
   [[https://github.com/magit/magit][Magit]] - A Git porcelain inside Emacs.

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-c v c" . magit-clone)
           ("C-c v C" . magit-checkout)
           ("C-c v d" . magit-dispatch-popup)
           ("C-c v g" . magit-blame)
           ("C-c v l" . magit-log-buffer-file)
           ("C-c v p" . magit-pull)
           ("C-c v v" . magit-status))
    :config (setq magit-save-repository-buffers 'dontask
                  magit-refs-show-commit-count 'all
                  magit-completing-read-function 'ivy-completing-read))
#+end_src

** Smartparens
   Smartparens - Minor mode for Emacs that deals with parens pairs and tries to
   be smart about it.

#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :bind (("C-<right> " . sp-forward-slurp-sexp)
           ("C-<left>"   . sp-forward-barf-sexp)
           ("M-r"        . sp-raise-sexp)
           ("C-M-k"      . sp-kill-sexp))
    :init (progn (smartparens-global-mode)
                 (show-smartparens-global-mode)
                 (smartparens-global-strict-mode))
    :config (setq sp-autoskip-closing-pair 'always
                  sp-hybrid-kill-entire-symbol nil))
#+end_src


* Productivity
** org-mode
*** org settings
#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :config
    (setq org-log-done t
	  org-default-notes-file "inbox.org"
	  org-hide-emphasis-markers t
	  org-fontify-quote-and-verse-blocks t
	  org-confirm-babel-evaluate nil
	  org-refile-targets '((org-agenda-files :maxlevel . 1))
	  org-agenda-files (list "~/org/inbox.org"
				 "~/org/someday.org"
				 "~/org/archive.org")
	  org-archive-location "~/org/archive.org::datatree/"
	  org-archive-mark-done t))
#+end_src

*** org-super-agenda
    [[https://github.com/alphapapa/org-super-agenda][org-super-agenda: Supercharge your Org daily/weekly agenda...]]

#+begin_src emacs-lisp
  (use-package org-super-agenda
    :ensure t
    :config (setq org-deadline-warning-days 7
		  org-agenda-block-separator 9472
		  org-agenda-skip-scheduled-if-done t)
    :init (org-super-agenda-mode))
#+end_src

*** org-mode visual
   Bullets as UTF-8 characters

#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :hook (org-mode . org-bullets-mode)
    :config (setq org-bullets-bullet-list '("◉" "○" "●" "►" "◇" "◎")))
#+end_src

*** org-cliplink
#+begin_src emacs-lisp
  (use-package org-cliplink
    :ensure t
    :bind ("C-c o i" . org-cliplink))
#+end_src

*** yankpad
    [[https://github.com/Kungsgeten/yankpad][GitHub - Kungsgeten/yankpad: Paste snippets from an org-mode file]]

#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t)
  (use-package yankpad
    :ensure t
    :init
    (setq yankpad-file "~/cloud/mds/Org/yankpad.org")
    (bind-keys :prefix-map yank-map
	       :prefix "C-c y"
	       ("c" . yankpad-set-category)
	       ("e" . yankpad-edit)
	       ("i" . yankpad-insert)
	       ("m" . yankpad-map)
	       ("r" . yankpad-reload)
	       ("x" . yankpad-expand)))
#+END_SRC

*** capture templates
