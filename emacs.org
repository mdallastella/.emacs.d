#+TITLE: Marco Dalla Stella Emacs's configuration

A literate based Emacs configuration. I took inspiration from various sources.

* General configuration
** Shell environment
Ensure environment variables inside Emacs look the same as in the user's shell.

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :init (exec-path-from-shell-initialize))
#+END_SRC

** Setting GPG and secrets

#+BEGIN_SRC emacs-lisp
  (setq epg-gpg-program "/usr/local/bin/gpg")
  (load-library "~/.emacs.d/.secrets.el")
#+END_SRC

** User details
My personal details.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Marco Dalla Stella")
  (setq user-mail-address private-user-mail-address)
#+END_SRC

** Emacs server
Start an Emacs server if it's not running.

#+BEGIN_SRC emacs-lisp
  (use-package server
    :if (not noninteractive)
    :defer t
    :config (unless (server-running-p)	; Start server only if it is not already running
	      (server-mode)))
#+END_SRC

** MacTeX settings
Setting path for LateX on macOS

#+BEGIN_SRC emacs-lisp
  (setenv "PATH" (concat (getenv "PATH") "/Library/TeX/Distributions/Programs/texbin"))
#+END_SRC

** Use Validate package
This library offers two functions that perform schema validation.  Use
this is your Elisp packages to provide very informative error messages
when your users accidentally misconfigure a variable: [[https://github.com/Malabarba/validate.el][validate.el]]

#+BEGIN_SRC emacs-lisp
  (use-package validate
    :ensure t)
#+END_SRC

** Backup and autosave
Maybe a little dangerous, but stops to make backups.

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+END_SRC

** Various minor settings
Delete the selection instead of insert

#+BEGIN_SRC emacs-lisp
  (use-package delsel
    :defer t
    :init (delete-selection-mode))
#+END_SRC

Save point position in files

#+BEGIN_SRC emacs-lisp
  (use-package saveplace
    :init (save-place-mode 1))
#+END_SRC

Auto-revert buffers of changed files

#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :init (global-auto-revert-mode)
    :config
    (validate-setq auto-revert-verbose nil
                   ;; Revert Dired buffers, too
                   global-auto-revert-non-file-buffers t)
    :diminish auto-revert-mode)
#+END_SRC

Kill ring features

#+BEGIN_SRC emacs-lisp
  (validate-setq kill-ring-max 200                 ; More killed items
		 kill-do-not-save-duplicates t     ; No duplicates in kill ring
		 ;; Save the contents of the clipboard to kill ring before killing
		 save-interprogram-paste-before-kill t)
#+END_SRC

Autosave buffers when they lose focus.

#+BEGIN_SRC emacs-lisp
(use-package super-save
  :ensure t
  :config (super-save-initialize))
#+END_SRC


* Interface settings
** Remove menus, bars and everything that's annoying
I don't like scrollbars nor bars. I've been using Emacs for many years, and
appreciate a certain minimalist approach to its display. While you can turn
these off with the menu items now, it is just as easy to set them here.

#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message "")	; Uh, I know what Scratch is for
  (when (window-system)
    (tool-bar-mode -1)                    ; Toolbars were only cool with XEmacs
    (when (fboundp 'horizontal-scroll-bar-mode)
      (horizontal-scroll-bar-mode -1))
    (blink-cursor-mode -1)
    (scroll-bar-mode -1)			; Scrollbars are waste screen estate
    (tooltip-mode -1))
#+END_SRC

** Font setup
I use the Iosevka ExtraLight font.

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
                      :family "Iosevka"
		      :weight 'extra-light
                      :height 160)
#+END_SRC

** Theme
My favorite theme is Solarized (dark version):

#+BEGIN_SRC emacs-lisp
(use-package solarized                      ; Default theme
  :ensure solarized-theme
  :config
  (progn
    (setq solarized-use-variable-pitch nil  ; Avoid all font-size changes
          solarized-distinct-doc-face t     ; Make doc faces stand out more
          solarized-scale-org-headlines nil ; Don't scale Org headlines
          solarized-use-more-italic t       ; Use italic more often
          solarized-use-less-bold t         ; Less bold, italic is enough
          ;; Underline below the font bottomline instead of the baseline
          x-underline-at-descent-line t)
    (load-theme 'solarized-dark 'no-confirm)))
#+END_SRC

#+RESULTS:
: t

** Mode line
Custom mode-line with [[https://github.com/Malabarba/smart-mode-line][smart-mode-line]]

#+BEGIN_SRC emacs-lisp
  (column-number-mode t)
  (line-number-mode t)
  (use-package smart-mode-line
    :ensure t
    :config (sml/setup)
    (setq sml/theme 'respectful)
    (setq sml/shorten-directory t)
    (setq sml/shorten-modes t)
    (setq sml/show-time t))
#+END_SRC

** Uniquify
Set unique buffer names.

#+BEGIN_SRC emacs-lisp
  (use-package uniquify
    :config (setq uniquify-buffer-name-style
                  'post-forward uniquify-separator ":"))
#+END_SRC

** Show matching parenthesis
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
  (use-package rainbow-delimiters
    :ensure t
    :init (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

** Disable annoying prompts and messages

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  (validate-setq kill-buffer-query-functions
		 (remq 'process-kill-buffer-query-function
                       kill-buffer-query-functions))

  (validate-setq ring-bell-function #'ignore
		 inhibit-startup-screen t
		 initial-scratch-message nil)
  (fset 'display-startup-echo-area-message #'ignore)
#+END_SRC

** Better looking break lines

#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines
    :ensure t
    :defer t
    :init (global-page-break-lines-mode)
    :diminish page-break-lines-mode)
#+END_SRC

** Prettify symbols

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode 1)
#+END_SRC

** Fontify number literals

#+BEGIN_SRC emacs-lisp
  (use-package highlight-numbers
    :ensure t
    :defer t
    :init (add-hook 'prog-mode-hook #'highlight-numbers-mode))
#+END_SRC

** Minibuffer settings
Allow to read from the minibuffer while in minibuffer
#+BEGIN_SRC emacs-lisp
  (validate-setq enable-recursive-minibuffers t)
#+END_SRC

Show the minibuffer depth (when larger than 1)
#+BEGIN_SRC emacs-lisp
  (minibuffer-depth-indicate-mode 1)
#+END_SRC

Never use dialogs for minibuffer input and store more history
#+BEGIN_SRC emacs-lisp
  (validate-setq use-dialog-box nil
		 history-length 1000)
#+END_SRC

Save minibuffer history
#+BEGIN_SRC emacs-lisp
(use-package savehist
  :init (savehist-mode t)
  :config
  (validate-setq savehist-save-minibuffer-history t
                 savehist-autosave-interval 180))
#+END_SRC

** Scratch settings
Use `emacs-lisp-mode' instead of `lisp-interaction-mode' for scratch buffer

#+BEGIN_SRC emacs-lisp
  (validate-setq initial-major-mode 'emacs-lisp-mode)
#+END_SRC

** Which-key
[[https://github.com/justbur/emacs-which-key][Which-key]] â€“ Emacs package that displays available keybindings in popup.

#+BEGIN_SRC emacs-lisp
  (use-package which-key                  ; Show help popups for prefix keys
    :ensure t
    :init (which-key-mode)
    :config
    (validate-setq
     which-key-idle-delay 0.4
     which-key-sort-order 'which-key-prefix-then-key-order)
     :diminish which-key-mode)
#+END_SRC

** EyeBrowse

Easy workspaces creation and switching

#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :ensure t
    :config (validate-setq eyebrowse-switch-back-and-forth t
			   eyebrowse-wrap-around t
			   eyebrowse-new-workspace t)
    (eyebrowse-mode t))
#+END_SRC


* Editing settings
** Set Command to Meta key on macOS
#+BEGIN_SRC emacs-lisp
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier nil)
#+END_SRC

** Windows navigation
Use Ctrl-c Arrow for cycle throught windows, ignoring possible errors.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c <left>")  'windmove-left)
  (global-set-key (kbd "C-c <right>") 'windmove-right)
  (global-set-key (kbd "C-c <up>")    'windmove-up)
  (global-set-key (kbd "C-c <down>")  'windmove-down)
#+END_SRC
** Tabs vs Spaces
I have learned to distrust tabs in my source code, so let's make sure
that we only have spaces. See [[http://ergoemacs.org/emacs/emacs_tabs_space_indentation_setup.html][this discussion]] for details.

#+BEGIN_SRC elisp
  (setq-default indent-tabs-mode nil)
  (setq tab-width 2)
#+END_SRC

Make tab key do indent first then completion.

#+BEGIN_SRC elisp
  (setq-default tab-always-indent 'complete)
#+END_SRC

** Misc variable settings
Does anyone type =yes= anymore?

#+BEGIN_SRC elisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Fix the scrolling to keep point in the center:

#+BEGIN_SRC elisp
  (setq scroll-conservatively 10000
        scroll-preserve-screen-position t)
#+END_SRC

I've been using Emacs for too long to need to re-enable each feature bit-by-bit:
#+BEGIN_SRC elisp
  (setq disabled-command-function nil)
#+END_SRC

Store more history
#+BEGIN_SRC emacs-lisp
  (validate-setq history-length 1000)
#+END_SRC

Increase line-spacing (default 0)
#+BEGIN_SRC emacs-lisp
  (setq-default line-spacing 0.2)
#+END_SRC

Configure a reasonable fill column and enable automatic filling
#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 80)
  (add-hook 'text-mode-hook #'auto-fill-mode)
  (diminish 'auto-fill-function)
#+END_SRC

** Ivy configuration
[[http://oremacs.com/swiper/][Ivy]] is an interactive interface for completion in Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :bind (("C-c C-r" . ivy-resume)
           :map ivy-minibuffer-map
           ("<return>" . ivy-alt-done)
           ("C-o" . hydra-ivy/body))
    :init (ivy-mode 1)
    :config
    (validate-setq
     ivy-count-format "(%d/%d) "          ; Show current match and matches
     ivy-extra-directories nil            ; Do not show "./" and "../"
     ivy-virtual-abbreviate 'full         ; Show full file path
     ;; Jump back to first candidate when on the last one
     ivy-wrap t
     ;; Show recently killed buffers when calling `ivy-switch-buffer'
     ivy-use-virtual-buffers t
     ;; Always ignore buffers set in `ivy-ignore-buffers'
     ivy-use-ignore-default 'always))
#+END_SRC

Use [[https://github.com/PythonNut/historian.el][ivy-historian]] too

#+BEGIN_SRC emacs-lisp
  (use-package ivy-historian              ; Store minibuffer candidates
    :ensure t
    :init (ivy-historian-mode +1))
#+END_SRC

** Swiper, Smex and counsel configuration
#+BEGIN_SRC emacs-lisp
  (use-package swiper                     ; Isearch with an overview
    :ensure t
    :bind (("C-c s s" . swiper-all)
	   :map isearch-mode-map
	   ("M-i" . swiper-from-isearch))
    :config
    ;; Always recentre when leaving Swiper
    (validate-setq swiper-action-recenter t))

  (use-package smex                       ; Better M-x interface
    :ensure t)

  (use-package counsel                    ; Completion functions with Ivy
    :ensure t
    :init (counsel-mode)
    :bind (("C-s"   . counsel-grep-or-swiper)
	   ("C-r"   . counsel-grep-or-swiper)
	   ("C-c u" . counsel-unicode-char)
	   ("C-c g" . counsel-git-grep)
	   ("C-c G" . counsel-git-log)
	   ("C-c k" . counsel-rg)
	   ("C-c r" . counsel-linux-app)
	   ("C-x l" . counsel-locate)
	   ("C-x i" . counsel-imenu)
	   ("C-x j" . counsel-bookmark)
	   ("C-c h h" . counsel-command-history)
	   ([remap execute-extended-command] . counsel-M-x)
	   ([remap find-file]                . counsel-find-file)
	   ([remap bookmark-jump]            . counsel-bookmark)
	   ([remap describe-function]        . counsel-describe-function)
	   ([remap describe-variable]        . counsel-describe-variable)
	   ([remap info-lookup-symbol]       . counsel-info-lookup-symbol))
    :bind (:map read-expression-map
		("C-r" . counsel-expression-history))
    :config
    (validate-setq
     counsel-bookmark-avoid-dired t
     counsel-mode-override-describe-bindings t
     counsel-grep-post-action-hook '(recenter)
     counsel-find-file-at-point t
     counsel-grep-base-command
     "rg -i -M 120 --no-heading --line-number --color never '%s' %s"
     counsel-find-file-ignore-regexp
     (concat
      ;; File names beginning with # or .
      "\\(?:\\`[#.]\\)"
      ;; File names ending with # or ~
      "\\|\\(?:\\`.+?[#~]\\'\\)"))
    :diminish counsel-mode)
#+END_SRC

** Autocompletation with company
[[http://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for "complete
anything". It uses pluggable back-ends and front-ends to retrieve and display
completion candidates.

#+BEGIN_SRC emacs-lisp
    (use-package company                    ; Auto-completion
      :ensure t
      :init (global-company-mode)
      :bind (:map company-active-map
		  ("C-n" . company-select-next)
		  ("C-p" . company-select-previous))
      :config
      (validate-setq company-tooltip-align-annotations t
                     company-tooltip-flip-when-above t
                     ;; Easy navigation to candidates with M-<n>
                     company-show-numbers t
                     ;; Ignore case
                     company-dabbrev-ignore-case t
                     ;; Do not downcase completion
                     company-dabbrev-downcase nil)
      :diminish company-mode)

  (use-package company-statistics         ; Show likelier candidates on top
    :ensure t
    :after company
    :config (company-statistics-mode))

  (use-package company-quickhelp          ; Show help in tooltip
    :ensure t
    :after company
    :config (company-quickhelp-mode))
#+END_SRC

** Undo tree
Treat undo history as a tree.

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree                  ; Show buffer changes as a tree
    :ensure t
    :init (global-undo-tree-mode)
    :config (validate-setq undo-tree-visualizer-timestamps t)                          
    :diminish undo-tree-mode)
#+END_SRC

** Aggressive indentation
aggressive-indent-mode is a minor mode that keeps your code always
indented.  It reindents after every change, making it more reliable
than `electric-indent-mode'.

#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :init (global-aggressive-indent-mode 1)
    :config
    ;; Free C-c C-q, used in Org and in CIDER
    (unbind-key "C-c C-q" aggressive-indent-mode-map)

    (add-to-list 'aggressive-indent-excluded-modes
		 'cider-repl-mode))
#+END_SRC

** Easy kill
Better kill text

#+BEGIN_SRC emacs-lisp
  (use-package easy-kill                  ; Better kill text
    :ensure t
    :bind (([remap kill-ring-save] . easy-kill)
           ([remap mark-sexp]      . easy-mark)))
#+END_SRC

** Remove trailing spaces on save
#+BEGIN_SRC emacs-lisp
  (use-package whitespace-cleanup-mode    ; Cleanup whitespace in buffers
    :ensure t
    :bind (("C-c t w" . whitespace-cleanup-mode)
	   ("C-c x w" . whitespace-cleanup))
    :init
    (dolist (hook '(prog-mode-hook text-mode-hook conf-mode-hook))
      (add-hook hook #'whitespace-cleanup-mode))
    :diminish whitespace-cleanup-mode)
#+END_SRC

** Copy as format
Copy the current region and apply the right format required by some services.

#+BEGIN_SRC emacs-lisp
  (use-package copy-as-format
    :ensure t
    :bind (("C-c y s" . copy-as-format-slack)
	   ("C-c y l" . copy-as-format-gitlab)
	   ("C-c y g" . copy-as-format-github)
	   ("C-c y m" . copy-as-format-markdown)))
#+END_SRC

** Highlight symbol

[[https://github.com/nschum/highlight-symbol.el][highlight-symbol.el]] - automatic and manual symbol highlighting for Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package highlight-symbol
    :ensure t
    :config (highlight-symbol-mode t)
    (highlight-symbol-nav-mode t))
#+END_SRC

** Flyspell
*** Flyspell configuration using [[https://hunspell.github.io][hunspell]].
**** hunspell
#+BEGIN_SRC emacs-lisp
  (use-package ispell
    :defer t
    :config
    (validate-setq
     ispell-program-name (executable-find "hunspell")
     ispell-dictionary "en_US"
     ispell-choices-win-default-height 5)

    (unless ispell-program-name
      (warn "No spell checker available.  Plese install hunspell.")))
#+END_SRC

**** Flyspell

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :init
    (add-hook 'prog-mode-hook #'flyspell-prog-mode)
    (add-hook 'org-mode-hook #'flyspell-mode)
    (add-hook 'text-mode-hook #'flyspell-mode)
    :config
    (validate-setq
     flyspell-use-meta-tab nil
     ;; Make Flyspell less chatty
     flyspell-issue-welcome-flag nil
     flyspell-issue-message-flag nil))

  (use-package flyspell-correct-ivy       ; Better interface for corrections
    :ensure t
    :after flyspell
    :bind (:map flyspell-mode-map
		("C-c $" . flyspell-correct-word-generic)))

  (use-package auto-correct               ; Automatically fix past corrections
    :ensure t
    :init (auto-correct-mode)
    :diminish auto-correct-mode)
#+END_SRC


* Coding settings
** Projectile
Projectile is a project interaction library for Emacs. Its goal is to provide a
nice set of features operating on a project level without introducing external
dependencies (when feasible).

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init (projectile-mode)
    :config
    ;; Remove dead projects when Emacs is idle
    (run-with-idle-timer 10 nil #'projectile-cleanup-known-projects)

    (validate-setq
     projectile-completion-system 'ivy
     projectile-find-dir-includes-top-level t)

    (projectile-register-project-type 'lein-cljs '("project.clj")
                                      :compile "lein cljsbuild once"
                                      :test "lein cljsbuild test")
    :diminish projectile-mode)
#+END_SRC

Ivy integration with Projectile

#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :bind (:map projectile-command-map
		("p" . counsel-projectile)
		("P" . counsel-projectile-switch-project)
		("r" . counsel-projectile-rg)))
#+END_SRC

Search project with ripgrep

#+BEGIN_SRC emacs-lisp
  (use-package projectile-ripgrep         ; Search projects with ripgrep
    :ensure t
    :bind (:map projectile-command-map
		("s r" . projectile-ripgrep)))
#+END_SRC

** Clojure
Clojure settings for Emacs
#+BEGIN_SRC emacs-lisp
  ;;; Clojure
  (use-package cider                      ; Clojure development environment
    :ensure t
    :defer t
    :config
    (add-hook 'cider-mode-hook 'eldoc-mode)
    (add-hook 'cider-repl-mode-hook #'smartparens-strict-mode)
    (add-hook 'cider-repl-mode-hook #'rainbow-delimiters-mode)
    ;; Set up Figwheel in ClojureScript REPL
    (validate-setq
     cider-cljs-lein-repl
     "(do (use 'figwheel-sidecar.repl-api) (start-figwheel!) (cljs-repl))")
    :bind (:map cider-repl-mode-map
		("C-c M-l" . cider-load-all-project-ns)))

  (use-package clojure-mode               ; Major mode for Clojure files
    :ensure t
    :defer t
    :init
    (add-hook 'clojure-mode-hook #'cider-mode)
    (add-hook 'clojure-mode-hook #'subword-mode))

  (use-package clojure-mode-extra-font-locking ; Font-locking for Clojure mode
    :ensure t
    :defer t
    :after clojure-mode)

  (use-package nrepl-client               ; Client for Clojure nREPL
    :ensure cider
    :defer t
    :config (validate-setq nrepl-hide-special-buffers t))

  (use-package cider-repl                 ; REPL interactions with CIDER
    :ensure cider
    :defer t
    :config
    (add-hook 'cider-repl-mode-hook #'eldoc-mode)
    (add-hook 'cider-repl-mode-hook #'subword-mode)

    (validate-setq cider-repl-wrap-history t
		   cider-repl-history-size 1000
		   cider-repl-history-file
		   (locate-user-emacs-file "cider-repl-history")
		   cider-repl-display-help-banner nil ; Disable help banner
		   cider-repl-pop-to-buffer-on-connect t
		   cider-repl-result-prefix ";; => "))

  (use-package cider-stacktrace           ; Navigate stacktrace
    :ensure cider
    :defer t)

  (use-package clj-refactor               ; Refactoring utilities
    :ensure t
    :defer t
    :init
    (defun my-clojure-mode-hook ()
      (clj-refactor-mode 1)
      (yas-minor-mode 1)                ; For adding require/use/import
      (cljr-add-keybindings-with-prefix "C-c C-m"))
    (add-hook 'clojure-mode-hook #'my-clojure-mode-hook)
    :config
    (validate-setq cljr-suppress-middleware-warnings t
		   cljr-auto-sort-ns t
		   cljr-favor-prefix-notation
		   cljr-favor-private-functions)
    :diminish clj-refactor-mode)

  (use-package clojure-snippets           ; Yasnippets for Clojure
    :ensure t
    :defer t
    :after clojure-mode)
#+END_SRC

** Python
Python configuration

#+BEGIN_SRC emacs-lisp
  (use-package python                     ; Python editing
    :defer t
    :config
    ;; PEP 8 compliant filling rules, 79 chars maximum
    (add-hook 'python-mode-hook (lambda () (setq fill-column 79)))
    (add-hook 'python-mode-hook #'subword-mode)

    (let ((ipython (executable-find "ipython")))
      (if ipython
          (setq python-shell-interpreter ipython)
	(warn "IPython is missing, falling back to default python"))))

  (use-package anaconda-mode              ; Powerful Python backend for Emacs
    :ensure t
    :defer t
    :after python
    :init (add-hook 'python-mode-hook #'anaconda-mode))

  (use-package pip-requirements           ; requirements.txt files
    :ensure t
    :defer t)
#+END_SRC

** Web Development
I use web-mode, css-mode and js2 for web development.

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :mode "\\.html\\'"
  :config (setq web-mode-markup-indent-offset 2
                web-mode-css-indent-offset 2
                web-mode-code-indent-offset 2))
#+END_SRC

A better JavaScript support
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :ensure t
  :mode "\\.js\\'"
  :config
  (progn
    (setq-default js2-basic-offset 2)
    (add-hook 'js2-mode-hook #'js2-highlight-unused-variables-mode)))
#+END_SRC

Better CSS support
#+BEGIN_SRC emacs-lisp
(use-package css-mode
  :mode "\\.css\\'"
  :config
  (progn
    (setq css-indent-offset 2)
    (add-hook 'css-mode-hook
              (lambda () (run-hooks 'prog-mode-hook)))))
#+END_SRC

Eldoc for CSS
#+BEGIN_SRC emacs-lisp
(use-package css-eldoc
  :ensure t
  :commands (turn-on-css-eldoc)
  :init (add-hook 'css-mode-hook #'turn-on-css-eldoc))
#+END_SRC

** Flycheck
[[http://www.flycheck.org][Flycheck]] automatically checks buffers for errors while you type, and reports
warnings and errors directly in the buffer and in an optional IDE-like error
list.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (add-hook 'prog-mode-hook #'flycheck-mode) ; Only for code buffer
    :config (validate-setq flycheck-standard-error-navigation nil
			   flycheck-display-errors-function
			   #'flycheck-display-error-messages-unless-error-list))
#+END_SRC

** Magit configuration
[[https://github.com/magit/magit][Magit]] - A Git porcelain inside Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package magit                      ; The best Git client out there
    :ensure t
    :bind (("C-c v c" . magit-clone)
	   ("C-c v C" . magit-checkout)
	   ("C-c v d" . magit-dispatch-popup)         
	   ("C-c v g" . magit-blame)
	   ("C-c v l" . magit-log-buffer-file)
	   ("C-c v p" . magit-pull)
	   ("C-c v v" . magit-status))
    :config
    (validate-setq magit-save-repository-buffers 'dontask
		   magit-refs-show-commit-count 'all)

    ;; Use Ivy
    (validate-setq magit-completing-read-function 'ivy-completing-read)

    ;; Show status buffer in fullscreen
    (validate-setq magit-display-buffer-function
		   #'magit-display-buffer-fullframe-status-v1)

    ;; Kill Magit buffers when quitting `magit-status'
    (defun my-magit-quit-session (&optional kill-buffer)
      "Kill all Magit buffers on quit"
      (interactive)
      (magit-restore-window-configuration kill-buffer)
      (my-kill-buffers "^\\*magit"))

    (bind-key "q" #'my-magit-quit-session magit-status-mode-map))

  (use-package magit-gitflow
    :ensure t
    :config (add-hook 'magit-mode-hook 'turn-on-magit-gitflow))
#+END_SRC

** Git Timemachine
[[https://github.com/pidu/git-timemachine][git-timemachine]] - Step through historic versions of git controlled file using
everyone's favourite editor.

#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :ensure t
    :bind ("C-c v t" . git-timemachine))
#+END_SRC

** Smartparens
Smartparens - Minor mode for Emacs that deals with parens pairs and tries to be
smart about it.

#+BEGIN_SRC emacs-lisp
(use-package smartparens                ; Parenthesis editing and balancing
  :ensure t
  :bind (("C-<right>" . sp-forward-slurp-sexp)
         ("C-<left>" . sp-forward-barf-sexp))
  :init
  (progn
    (smartparens-global-mode)
    (show-smartparens-global-mode)
    (sp-pair "'" nil :actions :rem)

    (dolist (hook '(inferior-emacs-lisp-mode-hook
                    emacs-lisp-mode-hook
                    clojure-mode-hook))
      (add-hook hook #'smartparens-strict-mode)))
  :config (setq sp-autoskip-closing-pair 'always
                ;; Don't kill entire symbol on C-k
                sp-hybrid-kill-entire-symbol nil))
#+END_SRC

** DevDocs.io
[[http://devdocs.io/][DevDocs]] combines multiple API documentations in a fast, organized, and
searchable interface.

#+BEGIN_SRC emacs-lisp
  (use-package devdocs
    :ensure t
    :bind ("C-c s d" . devdocs-search))
#+END_SRC

** Github stuff
[[https://github.com/defunkt/gist.el][gist.el]] â€“ Share snippets of code using Gist.

#+BEGIN_SRC emacs-lisp
  (use-package gist
    :ensure t
    :bind (("C-c C-g l" . gist-list)
	   ("C-c C-g n" . gist-region-or-buffer)
	   ("C-c C-g p" . gist-region-or-buffer-private)))

  (use-package magithub
    :ensure t
    :after magit
    :config (magithub-feature-autoinject t))
#+END_SRC

** Gitlab integration

[[https://github.com/nlamirault/emacs-gitlab][emacs-gitlab]] - A Gitlab client for Emacs

#+BEGIN_SRC emacs-lisp
  (use-package gitlab
    :ensure t
    :config (validate-setq gitlab-host 7b-gitlab-host
			   gitlab-username 7b-gitlab-username
			   gitlab-password 7b-gitlab-password))
#+END_SRC


* Keybindings
** Ctrl-z as undo
Use Ctrl-z as undo

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-z") 'undo)
#+END_SRC

** Set C-x C-k to kill the current buffer

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-k") 'kill-this-buffer)
#+END_SRC

** Bind M-g to goto-line

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-g") 'goto-line)
#+END_SRC

** Comment and uncomment regions

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c c c") 'comment-region)
(global-set-key (kbd "C-c c u") 'uncomment-region)
#+END_SRC
** Reopen last killed buffer

#+BEGIN_SRC emacs-lisp
  (defun my-reopen-last-killed-buffer ()
    "Quickly reopen last killed buffer."
    (interactive)
    (find-file (car recentf-list)))
  (bind-key "C-c f o" #'my-reopen-last-killed-buffer)
#+END_SRC

** Rebind split-window commands

In order to have a more tmux-like keybindings, I remap split-window-below and
split-window-right to C-c S-; and C-c S-5.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x \"") 'split-window-below)
  (global-set-key (kbd "C-x %") 'split-window-right)
#+END_SRC


* BEERWARE LICENSE

"THE BEER-WARE LICENSE" (Revision 42): <marco@dallastella.name> wrote this
file. As long as you retain this notice you can do whatever you want with this
stuff. If we meet some day, and you think this stuff is worth it, you can buy me
a beer in return Marco Dalla Stella.
