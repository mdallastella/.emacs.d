#+title: Emacs configuration
#+author: Marco Dalla Stella
#+created: <2022-10-14 Fri>
#+date: <2025-07-30 Wed>
#+property: header-args:emacs-lisp :result silent :tangle ./init.el :exports code :eval never-export
#+startup: fold

* Early init file
See [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html][Early Init File]] on Emacs manual.

#+begin_src emacs-lisp :tangle ./early-init.el :results silent :exports code :eval never-export
   ;;; early-init.el --- Early Init File -*- lexical-binding: t -*-

  ;; Do not resize the frame at this early stage.
  (setq frame-inhibit-implied-resize t)

  ;; Increase the garbage collector threshold
  (setq gc-cons-threshold most-positive-fixnum)

  ;; Disable some stuff
  (setq inhibit-startup-screen t
        inhibit-startup-message t
        inhibit-startup-buffer-menu t
        use-file-dialog nil
        visual-bell t)

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (blink-cursor-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Speed up startup
  ;; Temporarily increase the garbage collection threshold to speed up the startup
  ;; time.
  (setq gc-cons-threshold most-positive-fixnum)

  (defvar my/emacs-gc-cons-threshold (* 16 1024 1024)
    "The value of `gc-cons-threshold' after Emacs startup.")

  ;; Same idea as above for ~file-name-handler-alist~
  (defvar tmp--file-name-handler-alist file-name-handler-alist)

  (setq file-name-handler-alist nil)

  ;; Restore everything at the end
  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold my/emacs-gc-cons-threshold
                    file-name-handler-alist tmp--file-name-handler-alist)))

  ;; Measure the startup time.
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s seconds with %d garbage collections."
                       (emacs-init-time "%.2f")
                       gcs-done)))
#+end_src


* Init
** File header
#+begin_src emacs-lisp
  ;;; init.el --- Emacs configuration -*- lexical-binding: t -*-
#+end_src

** My personal information
#+begin_src emacs-lisp
  (require 'epa-file)
  (epa-file-enable)
  (load-file (locate-user-emacs-file "personal.el.gpg"))
  (require 'personal)

  (require 'plstore)
  (setq plstore-cache-passphrase-for-symmetric-encryption t)
  (add-to-list 'plstore-encrypt-to my/gpg-key)
#+end_src

** custom.el
Store ~custom.el~ in a separate file

#+begin_src emacs-lisp
  (setq custom-file (locate-user-emacs-file "custom.el"))
  (load custom-file :no-error-if-file-is-missing)
#+end_src

** Maximize windows by default
#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook 'toggle-frame-maximized)
#+end_src

** Native compilation
Native compilation tweaks.

#+begin_src emacs-lisp
  ;; Silence compiler warnings as they can be pretty disruptive
  (setq native-comp-async-report-warnings-errors nil
        byte-compile-warnings nil)
#+end_src

** Package management
Just good old [[https://github.com/jwiegley/use-package][use-package]] and [[https://github.com/slotThe/vc-use-package][vc-use-package]]:

#+begin_src emacs-lisp
  (require 'package)

  (setq package-vc-register-as-project nil) ; Emacs 30

  (add-hook 'package-menu-mode-hook #'hl-line-mode)

  (setq package-archives
        '(("gnu-elpa" . "https://elpa.gnu.org/packages/")
          ("melpa" . "https://melpa.org/packages/")))

  (require 'use-package-ensure)
    (setq use-package-always-ensure t)
    (setq package-check-signature nil)
#+end_src

** Benchmark init
Enable benchmarking only when needed.

#+begin_src emacs-lisp
  (use-package benchmark-init
    :disabled
    :config
    (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+end_src

** Keep .emacs.d nice and clean
Use =no-littering= to keep our directory clean.

#+begin_src emacs-lisp
  ;; Keep .emacs.d clean
  (use-package no-littering
    :ensure t
    :config
    (setq create-lockfiles nil
          delete-old-versions t
          kept-new-versions 6
          kept-old-versions 2
          version-control t))
#+end_src

Store backups and autosave files in ~/tmp~.

#+begin_src emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,(no-littering-expand-var-file-name "backup/")))
        auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src

** Hide byte compiler warnings
#+begin_src emacs-lisp
  (add-to-list 'display-buffer-alist
               '("\\`\\*\\(Warnings\\|Compile-Log\\)\\*\\'"
                 (display-buffer-no-window)
                 (allow-no-window . t)))
#+end_src

** Server mode
Emacs server mode.

#+begin_src emacs-lisp
  (use-package server
    :ensure nil
    :defer 1
    :config
    (unless (server-running-p)
      (server-start)))
#+end_src


* General settings
** Access to shell PATH
Ensure environment variables inside Emacs look the same as in the user’s shell.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-initialize))
#+end_src

** Save history
#+begin_src emacs-lisp
  (use-package savehist
    :ensure nil
    :init
    (savehist-mode t)
    :config
    (setq history-length 10000
          history-delete-duplicates t
          savehist-save-minibuffer-history t
          savehist-additional-variables '(kill-ring
                                          search-ring
                                          regexp-search-ring)))
#+end_src

** Auto Revert
Automatically reload changes on a file if needed.

#+begin_src emacs-lisp
  (use-package autorevert
    :ensure nil
    :config
    (setq global-auto-revert-non-file-buffers t
          auto-revert-use-notify nil)
    (global-auto-revert-mode t))
#+end_src

** Recent files
Save recent files

#+begin_src emacs-lisp
  (use-package recentf
    :ensure nil
    :config
    (setq recentf-max-saved-items 50
          recentf-max-menu-items 15))
   #+end_src

** Unbind Ctrl-z
I don't like to hide Emacs.

#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z"))
#+end_src

** Scratch buffer
Use ~emacs-lisp-mode~ instead of ~lisp-interaction-mode~ for scratch buffer.

#+begin_src emacs-lisp
  (setq initial-major-mode 'emacs-lisp-mode
        initial-scratch-message ";; Remember why you're doing it.\n\n")
#+end_src

** Delete moves to trash
Move deleted files to trash, you never know...

#+begin_src emacs-lisp
  (setq delete-by-moving-to-trash t)
#+end_src

** Recursive minibuffer
Enable the use of minibuffer in the minibuffer
#+begin_src emacs-lisp
  (setq enable-recursive-minibuffers t)
  (minibuffer-depth-indicate-mode)
#+end_src

** Dired settings
Some Dired settings I find useful.
#+begin_src emacs-lisp
  (setq dired-auto-revert-buffer t
        dired-kill-when-opening-new-dired-buffer t
        dired-listing-switches "-alh")
#+end_src


* Keybindings
The most frequent keybindings are structured in a mnemonic way for me. ~C-c~ is
the "leader", then a letter that identify the scope: ~c~ for generic functions, ~b~
for buffers, ~d~ for directories, ~f~ for files, ~p~ for projects, ~m~ for the active
major-modes and so on.

** Generic
#+begin_src emacs-lisp
  (defun my/open-config ()
    "Open the current Emacs configuration."
    (interactive)
    (find-file (expand-file-name "config.org" user-emacs-directory)))

  (use-package emacs
    :bind
    (;; Buffers
     ("C-c b k" . kill-current-buffer)
     ("C-c b r" . revert-buffer)
     ("C-c b l" . ibuffer)
     ;; Files
     ("C-c f f" . find-file)
     ("C-c f d" . dired-jump)
     ("C-c f P" . my/open-config)
     ;; Utility
     ("C-c u p l" . package-list-packages)
     ("C-c u p i" . package-install)
     ("C-c u p d" . package-delete)
     ("C-c u p u" . package-update-all)
     ("C-c u p v" . package-vc-upgrade-all)
     ;; Personal binds
     ("M-#" . mark-end-of-sentence)))
#+end_src

** which-key
[[https://github.com/justbur/emacs-which-key][Which-key]] – Emacs package that displays available keybindings in popup.

#+begin_src emacs-lisp
  (use-package which-key
    :ensure nil
    :diminish
    :config
    (setq which-key-sort-order 'which-key-key-order-alpha
          which-key-add-column-padding 1
          which-key-min-display-lines 6)
    (which-key-setup-side-window-bottom)
    (which-key-mode t))
#+end_src



* Editing
** Default fill-column
I use 80 characters.

#+begin_src emacs-lisp
  (setq-default fill-column 80)
  (auto-fill-mode t)
#+end_src

** Default coding system
#+begin_src emacs-lisp
  (set-charset-priority 'unicode)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq-default buffer-file-coding-system 'utf-8)
  (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
#+end_src

** Use spaces to indent, no tabs
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil           ; Never use tabs
                tab-always-indent 'complete    ; Indent or complete
                tab-width 2)                   ; Show eventual tabs as 4 spaces
#+end_src

** Delete selected region
When the region is active and you type text into the buffer, Emacs will delete
the selected text first.

#+begin_src emacs-lisp
  (setq delete-selection-mode t)
#+end_src

** Deal with whitespaces
#+begin_src emacs-lisp
  (use-package whitespace
    :ensure nil
    :hook
    (before-save . whitespace-cleanup))
#+end_src

** Delete / replace selected text
#+begin_src emacs-lisp
  (use-package delsel
    :ensure nil
    :hook (after-init . delete-selection-mode))
#+end_src

** Multiple cursors
[[https://github.com/magnars/multiple-cursors.el][Multiple cursors for Emacs]]

#+begin_src emacs-lisp
  (use-package multiple-cursors
    :defer t
    :bind
    (("C-c > n" . mc/mark-next-like-this)
     ("C-c > p" . mc/mark-previous-like-this)
     ("C-c > a" . mc/mark-all-like-this)
     ("C-c > >" . mc/edit-lines)))
#+end_src

** undo-fu
[[https://codeberg.org/ideasman42/emacs-undo-fu][undo-fu]] - Simple, stable undo with redo for emacs.

#+begin_src emacs-lisp
  (use-package undo-fu
    :bind (("C-z" . undo-fu-only-undo)
           ("C-M-z" . undo-fu-only-redo)))
#+end_src

** wgrep
[[https://github.com/mhayashi1120/Emacs-wgrep][wgrep.el]] - allows you to edit a grep buffer and apply those changes to the file
buffer.

#+begin_src emacs-lisp
  (use-package wgrep)
#+end_src

** Parenthesis
*** Electric Pair
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Matching.html][Electric Pair]]: provides a way to easily insert matching delimiters: parentheses,
braces, brackets, etc.

#+begin_src emacs-lisp
  (use-package elec-pair
    :ensure nil
    :hook
    (prog-mode . (lambda ()
                   (setq-local electric-pair-pairs
                               (append electric-pair-pairs '((?\{ . ?\}))))))
    :config
    (setq electric-pair-preserve-balance t
          electric-pair-delete-adjacent-pairs t)
    (electric-pair-mode))
#+end_src

*** Puni
[[https://github.com/AmaiKinono/puni][Puni]]: soft deletion keeping the parentheses balanced.

#+begin_src emacs-lisp
  (use-package puni
    :commands puni-global-mode
    :bind*
    (:map puni-mode-map
          ("C-<right>" . puni-slurp-forward)
          ("C-<left>" . puni-barf-forward)
          ("C-<up>" . puni-raise))
    :init
    (puni-global-mode))
#+end_src

** Avy - Jump around
[[https://github.com/abo-abo/avy][avy]] is a GNU Emacs package for jumping to visible text using a char-based
decision tree.

#+begin_src emacs-lisp
  (use-package avy
    :init
    (setq avy-background t
          avy-styles-alist '((avy-go-to-char-timer . at-full))
          avy-all-windows nil)
    :bind
    (("M-g l" . avy-goto-line)
     ("M-j" . avy-goto-char-timer)))
#+end_src

** Symbol overlay
Highlight symbols with overlays while providing a keymap for various operations
about highlighted symbols.

#+begin_src emacs-lisp
  (use-package symbol-overlay
    :command symbol-overlay-mode
    :bind-keymap
    ("C-c o" . symbol-overlay-map)
    :config
    (add-hook 'prog-mode-hook #'symbol-overlay-mode)
    (add-hook 'text-mode-hook #'symbol-overlay-mode))
#+end_src


** Expand region
[[https://github.com/magnars/expand-region.el][expand-region.el]] — Expand region selection.

#+begin_src emacs-lisp
  (use-package expand-region
    :bind ("C-/" . er/expand-region))
#+end_src

* UI
** Frame title
Show the current buffer name and the full path of the file on the app title bar.

#+begin_src emacs-lisp
  (setq-default frame-title-format "%b (%f)")
#+end_src

** Font setup
Set my favorite font.

#+begin_src emacs-lisp
  (use-package emacs
    :config
    (set-face-attribute 'default nil
                        :family "Iosevka NFM"
                        :weight 'normal
                        :height 120)
    (set-face-attribute 'variable-pitch nil
                        :family "Iosevka Aile"
                        :weight 'normal
                        :height 120))
#+end_src

** Theme
#+begin_src emacs-lisp
  (use-package catppuccin-theme
    :init
    (setq catppuccin-flavor 'mocha)
    :config
    (setq catppuccin-italic-comments t
          catppuccin-highlight-matches t)
    (load-theme 'catppuccin t))
#+end_src

** Modeline
#+begin_src emacs-lisp
  (use-package minions
    :config
    (minions-mode))
#+end_src

** Show matching parenthesis
#+begin_src emacs-lisp
  (use-package paren
    :config
    (setq show-paren-when-point-inside-paren t
          show-paren-when-point-in-periphery t)
    (show-paren-mode t))

  (use-package rainbow-delimiters
    :commands rainbow-delimiters-mode
    :init
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src

** Use icons and emoji
[[https://github.com/domtronn/all-the-icons.el][all-the-icons.el]]: A utility package to collect various Icon Fonts and propertize them within Emacs.

#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

[[https://github.com/iyefrat/all-the-icons-completion][all-the-icons-completion]]: adds icons to completion candidates using the built in
completion metadata functions.

#+begin_src emacs-lisp
  (use-package all-the-icons-completion
    :hook
    (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :config
    (all-the-icons-completion-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package emojify
    :config
    (global-emojify-mode))
#+end_src

** Increase line-spacing
#+begin_src emacs-lisp
  (setq-default line-spacing 0.2)
#+end_src

** Show column
#+begin_src emacs-lisp
  (column-number-mode)
#+end_src

** Prettify symbols
#+begin_src emacs-lisp
  (global-prettify-symbols-mode t)
#+end_src

** Window margins and line numbers
I like to have some space on the left and right edge of the window.

#+begin_src emacs-lisp
  (setq-default left-margin-width 3
                right-margin-width 3)
#+end_src

** Highlight uncommitted changes
Use the diff-hl package to highlight changed-and-uncommitted lines when
programming.

#+begin_src emacs-lisp
  (use-package diff-hl
    :hook ((magit-pre-refresh . diff-hl-magit-pre-refresh)
           (magit-post-refresh . diff-hl-magit-post-refresh))
    :config
    (global-diff-hl-mode))
#+end_src

** ace-window
ace-window

#+begin_src emacs-lisp
  (use-package ace-window
    :bind
    ("M-o" . ace-window)
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)
          aw-dispatch-always t))
#+end_src


* Tools
** Tabspaces
Tabspaces leverages tab-bar.el and project.el for workspaces.
#+begin_src emacs-lisp
  (use-package tabspaces
    :hook (after-init . tabspaces-mode)
    :commands (tabspaces-switch-or-create-workspace
               tabspaces-open-or-create-project-and-workspace)
    :bind
    (("M-g p" . tabspaces-switch-or-create-workspace)
     ("M-g q" . tabspaces-open-or-create-project-and-workspace))
    :config
    (setq tabspaces-use-filtered-buffers-as-default t
          tabspaces-default-tab "main"
          tabspaces-remove-to-default t
          tabspaces-include-buffers '("*scratch*" "*Messages*")
          tabspaces-initialize-project-with-todo nil
          tab-bar-new-tab-choice "*scratch*"))
#+end_src

** envrc
#+begin_src emacs-lisp
  (use-package envrc
    :config
    (envrc-global-mode))
#+end_src
** mise
I use [[https://mise.jdx.dev/][mise-en-place]] to manage my dev environments.
#+begin_src emacs-lisp
  (use-package mise
    :config
    (global-mise-mode))
#+end_src

** vterm
Emacs-libvterm (vterm) is fully-fledged terminal emulator inside GNU Emacs based
on libvterm, a C library. As a result of using compiled code (instead of elisp),
emacs-libvterm is fully capable, fast, and it can seamlessly handle large
outputs.

#+begin_src emacs-lisp
  (use-package vterm
    :bind ("C-c u t" . vterm-other-window)
    :config
    (setq vterm-kill-buffer-on-exit t))
#+end_src

** Vertico, Orderless, Consult, Marginalia, Embark
*** Orderless
[[https://github.com/oantolin/orderless][Orderless]] provides an ~orderless~ completion style that divides the pattern into
space-separated components, and matches all the components in any order.

#+begin_src emacs-lisp
  (use-package orderless
    :config
    (setq completion-styles '(orderless basic)
          completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

*** Vertico
[[https://github.com/minad/vertico][Vertico]]: provides a performant and minimalistic vertical completion UI based on
the default completion system.

#+begin_src emacs-lisp
  (use-package vertico
    :config
    (setq vertico-sort-function 'vertico-sort-history-alpha)
    (vertico-mode))
#+end_src

*** Consult
[[https://github.com/minad/consult][Consult]] provides practical commands based on the Emacs completion function
completing-read.

#+begin_src emacs-lisp
    (use-package consult
      :bind
      (("M-g l" . consult-goto-line)
       ("M-g b" . consult-buffer)
       ("M-g i" . consult-imenu)
       ("M-g f" . consult-flymake)
       ("M-g g" . consult-ripgrep)
       ("M-g o" . consult-org-heading))
      :config
      (recentf-mode t)
      (setq consult-buffer-sources '(consult--source-project-buffer
                                     consult--source-buffer
                                     consult--source-hidden-buffer
                                     consult--source-project-recent-file))
      (setq consult-preview-key "M-."))
#+end_src

*** Marginalia
[[https://github.com/minad/marginalia][Marginalia]]: provides marks or annotations placed at the margin of the page of a
book or in this case helpful colorful annotations placed at the margin of the
minibuffer for your completion candidates.

#+begin_src emacs-lisp
  (use-package marginalia
    :config
    (marginalia-mode))
#+end_src

*** Embark
#+begin_src emacs-lisp
  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
** Spell checking
*** jinx
#+begin_src emacs-lisp
  (use-package jinx
    :bind
    ("C-c s s" . jinx-correct)
    ("C-c s l" . jinx-languages)
    :config
    (setq jinx-languages "en_US it_IT")
    (global-jinx-mode))
#+end_src

** Completion
*** corfu
Corfu enhances completion at point with a small completion popup.

#+begin_src emacs-lisp
  (use-package corfu
    :config
    (setq corfu-auto t)
    :init
    (global-corfu-mode))
#+end_src

*** hippie-expand
Use hippie-expand instead of dabbrev-expand.

#+begin_src emacs-lisp
  (use-package hippie-exp
    :bind*
    ("M-/" . hippie-expand))
#+end_src

** Helpful
[[https://github.com/Wilfred/helpful][Helpful]] is an alternative to the built-in Emacs help that provides much more
contextual information.

#+begin_src emacs-lisp
  (use-package helpful
    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable))
#+end_src

** Dictionary
Use built-in dictionary-el.

#+begin_src emacs-lisp
  (use-package dictionary
    :ensure nil
    :defer t
    :bind
    ("C-c s d" . dictionary-search)
    :config
    (setq dictionary-server "dict.org"
          dictionary-use-single-buffer t))
#+end_src

** Mastodon
[[https://codeberg.org/martianh/mastodon.el][Mastodon.el]] - A mastodon client for Emacs

#+begin_src emacs-lisp
  (use-package mastodon
    :config
    (setq mastodon-instance-url "https://functional.cafe"
          mastodon-active-user "mdallastella"))
#+end_src


* Programming
** Indenting
#+begin_src emacs-lisp
  (setq-default c-basic-offset 2
                tab-width 2
                intent-tabs-mode nil
                java-ts-mode-indent-offset 2)
#+end_src
** Tree-Sitter
Remap some major mode with their tree-sitter implementation.
#+begin_src emacs-lisp
  (use-package treesit-auto
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))
#+end_src
** Project
Let's use the built-in module to manage different projects.

#+begin_src emacs-lisp
  (use-package project
    :ensure nil
    :commands project-root
    :bind-keymap
    ("C-c p" . project-prefix-map))
#+end_src

** Magit
[[https://github.com/magit/magit][Magit]] - A Git porcelain inside Emacs.

#+begin_src emacs-lisp
  (use-package magit
    :defer t
    :bind
    (("C-c g g" . magit-status)
     ("C-c g l" . magit-log)
     ("C-c g r" . vc-refresh-state))
    :config
    (setq magit-save-repository-buffers 'dontask
          magit-refs-show-commit-count 'all
          magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1
          magit-bury-buffer-function #'magit-restore-window-configuration))
#+end_src

** eldoc
#+begin_src emacs-lisp
  (use-package eldoc
    :config
    (setq eldoc-echo-area-display-truncation-message nil
          eldoc-echo-area-use-multiline-p nil))
#+end_src

** LSP
#+begin_src emacs-lisp
  (use-package jsonrpc :ensure t)
#+end_src

[[https://joaotavora.github.io/eglot/][Eglot: The Emacs Client for the Language Server Protocol]]

#+begin_src emacs-lisp
  (setq package-pinned-packages '((eglot . "gnu-devel")))

  (use-package eglot
    :defer t
    :bind
    (("C-c l l" . eglot)
     ("C-c l e" . eglot-rename)
     ("C-c l a" . eglot-code-actions)
     ("C-c l d" . xref-find-definitions)
     ("C-c l e" . eldoc-doc-buffer)
     ("C-c l q" . eglot-shutdown))
    :config
    (setq eglot-send-changes-idle-time 0.2
          eglot-autoshutdown t
          read-process-output-max (* 1024 1024)
          eglot-extend-to-xref t
          eglot-connect-timeout 1200
          eglot-inlay-hints-mode nil
          eglot-ignored-server-capabilities '(:inlayHintProvider
                                              :documentOnTypeFormattingProvider
                                              :documentHighlightProvider)))
#+end_src



#+begin_src emacs-lisp
  (use-package eglot-booster
    :vc
    (eglot-booster :url "https://github.com/jdtsmith/eglot-booster")
    :after eglot
    :config
    (eglot-booster-mode))
#+end_src

[[https://github.com/flycheck/flycheck-eglot][flycheck-eglot]]: A simple “glue” minor mode that allows Flycheck and Eglot to work together.

#+begin_src emacs-lisp
  (use-package flycheck-eglot
    :ensure t
    :after (flycheck eglot)
    :config
    (global-flycheck-eglot-mode 1))
#+end_src

** Dape
[[https://github.com/svaante/dape][Dape]] - Debug Adapter Protocol for Emacs

#+begin_src emacs-lisp
  (use-package dape
    :defer t
    :config
    (setq dape-buffer-window-arrangement 'right)
    (add-hook 'dape-on-stopped-hooks 'dape-info)
    (add-hook 'dape-on-stopped-hooks 'dape-repl)

    ;; By default dape uses gdb keybinding prefix
    ;; If you do not want to use any prefix, set it to nil.
    ;; (setq dape-key-prefix "\C-x\C-a")

    (add-hook 'dape-compile-compile-hooks 'kill-buffer)
    (add-hook 'dape-on-start-hooks
               (defun dape--save-on-start ()
                 (save-some-buffers t t))))
#+end_src

** Clojure
Clojure settings for Emacs
*** Neil
[[https://github.com/babashka/neil][Neil]] - A CLI to add common aliases and features to deps.edn-based projects.

#+begin_src emacs-lisp
  (use-package neil
    :defer t
    :config
    (setq neil-prompt-for-version-p nil
          neil-inject-dep-to-project-p t))
#+end_src

*** Cider
#+begin_src emacs-lisp
  (use-package cider
    :defer t
    :mode "\\.bb\\'"
    :hook
    ((cider-mode . eldoc-mode)
     (clojure-mode . cider-mode)
     (clojure-mode . subword-mode)
     (cider-repl-mode . eldoc-mode)
     (cider-repl-mode . subword-mode)
     (cider-mode . cider-enable-flex-completion)
     (cider-repl-mode . cider-enable-flex-completion))
    :bind
    (:map clojure-mode-map
          ("C-c m j" . cider-jack-in-clj)
          ("C-c m J" . cider-jack-in-cljs)
          ("C-c m d" . neil-find-clojure-package)
          ("C-c m n" . cider-repl-set-ns)
          :map cider-repl-mode-map
          ("C-c m l" . cider-repl-clear-buffer)
          ("RET" . cider-repl-newline-and-indent)
          ("C-<return>" . cider-repl-return))
    :config
    (setq cider-eldoc-display-for-symbol-at-point nil
          cider-font-lock-dynamically t
          cider-save-file-on-load t
          cider-repl-pop-to-buffer-on-connect 'display-only
          cider-repl-history-file (locate-user-emacs-file "cider-repl-history")
          cider-repl-display-help-banner nil))
#+end_src

*** Clojure Flycheck
Flycheck using clj-kondo.

#+begin_src emacs-lisp
  (use-package flycheck-clj-kondo)

  (use-package clojure-mode
    :defer t
    :config
    (require 'flycheck-clj-kondo))
#+end_src

*** Font-locking for Clojure mode
#+begin_src emacs-lisp
  (use-package clojure-mode-extra-font-locking
    :after clojure-mode)
#+end_src

*** Code formatting
I like my code to be formatted following standard conventions. Thanks to [[https://manueluberti.eu/2022/10/27/cljformat.html][Manuel
Uberti]].

#+begin_src emacs-lisp
  (defun my/cljfmt-format-buffer ()
    "Format current buffer with `cljfmt'."
    (when (derived-mode-p 'clojure-mode)
      (let* ((pr (project-root (project-current)))
             (cfg-dir (locate-dominating-file pr "cljfmt.edn"))
             (cfg-edn (expand-file-name "cljfmt.edn" cfg-dir))
             (cmd (if (file-exists-p cfg-edn)
                      (format "cljfmt -c %s %s" cfg-edn buffer-file-name)
                    (format "cljfmt %s" buffer-file-name))))
        (shell-command-to-string cmd))
      (revert-buffer t t)))

  (defun my/cider-format-buffer ()
    "Automatically format current buffer after saving."
    (add-hook 'after-save-hook #'my/cljfmt-format-buffer nil t))

  (add-hook 'cider-mode-hook #'my/cider-format-buffer)
#+end_src

*** TODO REPL buffer position
I want the REPL always on the right side.

#+begin_src emacs-lisp
  (add-to-list 'display-buffer-alist
               '((derived-mode . cider-repl-mode)
                 (display-buffer-pop-up-window)
                 (side . right)
                 (window-width . 0.5)))
#+end_src

*** Clay
#+begin_src emacs-lisp
  (use-package clay
    :after clojure-mode
    :defer t
    :bind
    (:map clojure-mode-map
          ("C-c m c s" . clay-start)
          ("C-c m c m" . clay-make-ns-html)
          ("C-c m c k" . clay-make-last-sexp)
          ("C-c m c q" . clay-make-ns-quarto-html)))
#+end_src

** Lisp
*** Sly
[[https://joaotavora.github.io/sly][SLY]] is a Common Lisp IDE for Emacs.
#+begin_src emacs-lisp
  (use-package sly
    :defer t
    :config
    (setq inferior-lisp-program "sbcl"))
#+end_src

** JavaScript
[[https://github.com/mooz/js2-mode][js2-mode]]: Improved JavaScript editing mode for GNU Emacs.

#+begin_src emacs-lisp
  (use-package rjsx-mode
    :defer t
    :mode "\\.[mc]?js\\'"
    :mode "\\.es6\\'"
    :mode "\\.pac\\'"
    :interpreter "node"
    :config
    (setq js-chain-indent t
          ;; These have become standard in the JS community
          js2-basic-offset 2
          ;; Don't mishighlight shebang lines
          js2-skip-preprocessor-directives t
          ;; let flycheck handle this
          js2-mode-show-parse-errors nil
          js2-mode-show-strict-warnings nil
          ;; Flycheck provides these features, so disable them: conflicting with
          ;; the eslint settings.
          js2-strict-missing-semi-warning nil
          ;; maximum fontification
          js2-highlight-level 3
          js2-idle-timer-delay 0.15))
   #+end_src
** HTML & CSS
[[https://github.com/fxbois/web-mode][web-mode]]: an emacs major mode for editing HTML files.

#+begin_src emacs-lisp
  (use-package web-mode
    :defer t
    :mode
    ("\\.njk\\'" "\\.tpl\\.php\\'"
     "\\.[agj]sp\\'" "\\.as[cp]x\\'"
     "\\.erb\\'" "\\.mustache\\'"
     "\\.djhtml\\'" "\\.[t]?html?\\'"
     "\\.js\\'")
    :config
    (setq web-mode-markup-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-script-padding 0
          web-mode-enable-auto-pairing nil))
#+end_src
** VUE
Derive vue-mode from web-mode and add lsp support.
#+begin_src emacs-lisp
  (defun my/vue-eglot-setup ()
    (let* ((cmd "npm list --global --parseable typescript | head -n1")
           (tsdk-path (expand-file-name
                       "lib" (string-trim-right (shell-command-to-string cmd)))))
      `(:typescript
        (:tsdk ,tsdk-path
               :languageFeatures
               ( :completion ( :defaultTagNameCase "both"
                               :defaultAttrNameCase "kebabCase"
                               :getDocumentNameCasesRequest nil
                               :getDocumentSelectionRequest nil)
                 :diagnostics (:getDocumentVersionRequest nil))
               :documentFeatures
               (:documentFormatting (:defaultPrintWidth 100
                                     :getDocumentPrintWidthRequest nil)
                                    :documentSymbol t
                                    :documentColor t)))))

  (define-derived-mode vue-mode web-mode "Vue mode")
  (add-to-list 'auto-mode-alist '("\\.vue\\'" . vue-mode))

  (with-eval-after-load 'eglot
    (push `(vue-mode . ("vue-language-server" "--stdio"
                        :initializationOptions ,(my/vue-eglot-setup)))
          eglot-server-programs))
#+end_src
** YAML
#+begin_src emacs-lisp
  (use-package yaml-ts-mode
    :defer t)
#+end_src
** JSON
#+begin_src emacs-lisp
  (use-package json-mode
    :defer t
    :mode ("\\.json\\'" "\\.jsonc\\'")
    :bind
    (:map json-mode-map
          ("C-c C-j" . jq-interactively))
    :config
    (setq js-indent-level 2))

  (use-package jq-mode :after json-mode)
#+end_src
** Docker
#+begin_src emacs-lisp
  (use-package docker :defer t)
  (use-package dockerfile-mode :defer t)
#+end_src
** Python
*** Python virtual environment
#+begin_src emacs-lisp
  (setq major-mode-remap-alist
        '((python-mode . python-ts-mode)))

  (use-package pyvenv
    :after python-ts-mode
    :defer t)

  (use-package pyvenv-auto
    :defer t
    :hook ((python-mode python-ts-mode) . pyvenv-auto-run))
#+end_src

** Java
#+begin_src emacs-lisp
  (use-package jarchive
    :init
    (jarchive-mode))

  (defun my/jdtls-setup (_interactive project)
    (list "jdtls"
          "-configuration" (file-name-concat (xdg-cache-home) "jdtls")
          "-data" (expand-file-name (md5 (project-root project))
                                    (locate-user-emacs-file "jdtls-cache"))
          "--jvm-arg=-javaagent:/usr/lib/lombok-common/lombok.jar"))

  (with-eval-after-load 'eglot
    (push '((java-mode java-ts-mode) . my/jdtls-setup)
          eglot-server-programs))

  (use-package java-ts-mode
    :config
    (setq java-ts-mode-indent-offset 2))
#+end_src

** PHP
I have to deal with this s**t sometimes... :(

#+begin_src emacs-lisp
  (use-package php-mode
    :defer t)
#+end_src

** Typst
Tree Sitter support for Typst.
#+begin_src emacs-lisp
  (use-package typst-ts-mode
    :defer t
    :vc
    (typst-ts-mode :url "https://codeberg.org/meow_king/typst-ts-mode/")
    :custom
    (typst-ts-watch-options "--open")
    (typst-ts-mode-grammar-location (expand-file-name "tree-sitter/libtree-sitter-typst.so" user-emacs-directory))
    (typst-ts-mode-enable-raw-blocks-highlight t)
    :config
    (keymap-set typst-ts-mode-map "C-c C-c" #'typst-ts-tmenu))
#+end_src

** KDL
Major mode to edit [[https://kdl.dev/][The KDL Document Language]]

#+begin_src emacs-lisp
  (use-package kdl-mode
    :defer t
    :mode ("\\.kdl\\'"))
#+end_src

** Rust
Rust setup

#+begin_src emacs-lisp
  (use-package rust-mode
    :defer t)
#+end_src

Cargo

#+begin_src emacs-lisp
  (use-package cargo-mode
    :after rust-mode
    :hook
    (rust-mode . cargo-minor-mode)
    :bind-keymap
    ("C-c r" . cargo-mode-command-map)
    :config
    (setq compilation-scroll-output t))
#+end_src


* Productivity
** markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :init
    (setq markdown-hide-urls t
          markdown-asymmetric-header t)
    :mode ("\\.md" . gfm-mode))
#+end_src
** org-mode
*** Settings
#+begin_src emacs-lisp
  (defun my/open-inbox ()
    (interactive)
    (find-file (concat org-directory "/inbox.org")))

  (use-package org
    :hook ((org-mode . org-indent-mode)
           (org-mode . auto-fill-mode))
    :bind
    (("C-c t t" . org-capture)
     ("C-c t a" . org-agenda-list)
     ("C-c t i" . my/open-inbox)
     (:map org-mode-map
           ("C-c m h" . consult-org-heading)
           ("C-c m t" . org-tags-view)
           ("C-c m c" . org-cycle-global)))
    :config
    (setq org-directory "~/org"
          org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "NEXT(n)" "|" "DONE(d)" "CANCELLED(c)"))
          org-log-repeat nil
          org-default-notes-file "~/org/inbox.org"
          org-agenda-files (list org-directory)
          org-agenda-restore-windows-after-quit t
          org-archive-location (concat org-directory "/archive/archive.org::datatree/")
          org-archive-mark-done t
          org-refile-targets `((,(directory-files "~/org" t "\\.org$") . (:maxlevel . 3)))
          org-use-tag-inheritance t
          org-refile-use-cache nil
          org-refile-use-outline-path 'file
          org-refile-allow-creating-parent-nodes 'confirm
          org-outline-path-complete-in-steps nil
          org-use-speed-commands t
          org-return-follows-link t
          org-hide-emphasis-markers t
          org-ellipsis "…"
          org-fontify-quote-and-verse-blocks t
          org-src-tab-acts-natively t
          org-adapt-indentation t
          org-use-sub-superscripts nil
          org-ascii-headline-spacing '(0 . 0)
          org-structure-template-alist '(("s" . "src")
                                         ("e" . "src emacs-lisp")
                                         ("x" . "example")
                                         ("X" . "export")
                                         ("q" . "quote"))))
#+end_src
*** org-capture
Org capture configuration

#+begin_src emacs-lisp
  (setq org-capture-templates
        '(("t" "Todo" entry (file "todo.org")
           "* TODO %? %^G\nSCHEDULED: %^t")
          ("i" "Inbox" entry (file "inbox.org")
           "* NEXT %? %^G\n:PROPERTIES:\n:ID: %(org-id-new)\n:END:")
          ("p" "Protocol" entry (file "inbox.org")
           "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
          ("L" "Protocol Link" entry (file "inbox.org")
           "* %? [[%:link][%:description]] \nCaptured On: %U")
          ("j" "Journal" entry (file+olp+datetree "journal.org")
           "* %U %?\n%i\n%a" :kill-buffer t :tree-type week)))
#+end_src
*** save org buffers after org operations
#+begin_src emacs-lisp
  (add-hook 'org-capture-after-finalize-hook #'org-save-all-org-buffers)
  (add-hook 'org-after-todo-state-change-hook #'org-save-all-org-buffers)
  (add-hook 'org-archive-hook #'org-save-all-org-buffers)
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
#+end_src

*** org-modern
[[https://github.com/minad/org-modern][GitHub - minad/org-modern: :unicorn: Modern Org Style]]

#+begin_src emacs-lisp
  (use-package org-modern
    :config
    (setq org-auto-align-tags nil
          org-tags-column 0
          org-fold-catch-invisible-edits 'show-and-error
          org-special-ctrl-a/e t
          org-insert-heading-respect-content t
          org-hide-emphasis-markers t
          org-pretty-entities t
          org-ellipsis "…"
          ;; Agenda styling
          org-agenda-tags-column 0
          org-agenda-block-separator ?─
          org-agenda-time-grid
          '((daily today require-timed)
            (800 1000 1200 1400 1600 1800 2000)
            " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
          org-agenda-current-time-string
          "⭠ now ─────────────────────────────────────────────────")
    (global-org-modern-mode))
#+end_src

*** org-wild-notifier
[[https://github.com/akhramov/org-wild-notifier.el][org-wild-notifier]]: Adds notification support for org-agenda views. With this
package you’ll get notifications for TODO entries.

#+begin_src emacs-lisp
  (use-package org-wild-notifier
    :ensure t
    :config
    (setq alert-default-style 'libnotify)
    (org-wild-notifier-mode))
#+end_src

*** org-cliplink
A simple command that takes a URL from the clipboard and inserts an org-mode
link with a title of a page found by the URL into the current buffer.

#+begin_src emacs-lisp
  (use-package org-cliplink
    :after org
    :bind
    (:map org-mode-map
          ("C-c m l" . org-cliplink)))
#+end_src

*** org-download
[[https://github.com/abo-abo/org-download][org-download]] - This extension facilitates moving images from point A to point B.

#+begin_src emacs-lisp
  (use-package org-download
    :defer t
    :hook (org-mode . org-download-enable))
#+end_src
*** notes on documents
**** pdf-tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :defer t
    :magic ("%PDF" . pdf-view-mode)
    :config
    (pdf-tools-install))
#+end_src

**** epub - nov.el
#+begin_src emacs-lisp
  (use-package nov
    :defer t
    :mode ("\\.epub\\'" . nov-mode))
  #+end_src
*** org-babel
Configuration for literate programming (mainly clojure).
#+begin_src emacs-lisp
  (use-package ob-clojure
    :ensure nil
    :config
    (setq org-babel-clojure-backend 'cider)
    (require 'cider))
#+end_src
*** ox-typst
org-mode to typst configuration.

#+begin_src emacs-lisp
  (use-package ox-typst
    :after org)
#+end_src

** Wallabag
[[https://github.com/chenyanming/wallabag.el][wallabag.el]] - Emacs Wallabag client.

#+begin_src emacs-lisp
  (use-package wallabag
    :defer t
    :config
    (setq wallabag-host "https://wb.dallastella.name"
          wallabag-search-print-items '("title" "domain" "tag" "reading-time" "date")
          wallabag-search-page-max-rows 32))
#+end_src

** Denote
[[https://protesilaos.com/emacs/denote][Denote]] configuration

#+begin_src emacs-lisp
  (use-package denote-org
    :ensure t
    :after denote
    :config
    (setq denote-org-store-link-to-heading 'id))

  (use-package denote
    :hook
    (dired-mode . denote-dired-mode)
    :bind
    ((:map global-map
           ("C-c n n" . denote-open-or-create)
           ("C-c n d" . denote-dired)
           ("C-c n g" . denote-grep)
           ("C-c n e" . denote-region))
     (:map org-mode-map
           ("C-c n l" . denote-link)
           ("C-c n L" . denote-add-links)
           ("C-c n r" . denote-rename-file-using-front-matter)
           ("C-c n E" . denote-org-extract-org-subtree)
           ("C-c n I" . denote-org-dblock-insert-files-as-headings)))
    :config
    (setq denote-directory (expand-file-name "~/notes")
          denote-file-type 'org
          denote-save-buffers nil)
    (denote-rename-buffer-mode))
#+END_SRC


* LLM
** chatgpt-shell
[[https://github.com/xenodium/chatgpt-shell][xenodium/chatgpt-shell: A multi-llm Emacs shell (ChatGPT, Claude, De...]]

#+begin_src emacs-lisp
  (use-package chatgpt-shell
    :defer t
    :bind
    ("C-c u a" . chatgpt-shell-transient)
    :custom
    (chatgpt-shell-openrouter-key my/openrouter-key)
    :config
    (setq chatgpt-shell-welcome-function nil
          chatgpt-shell-model-version "anthropic/claude-3.7-sonnet"))
#+end_src

** gptel
#+begin_src emacs-lisp
  (use-package gptel
    :defer t
    :config
    ;; OpenRouter offers an OpenAI compatible API
    (setq gptel-model 'anthropic/claude-3.5-sonnet
          gptel-backend (gptel-make-openai "OpenRouter"
                          :host "openrouter.ai"
                          :endpoint "/api/v1/chat/completions"
                          :stream t
                          :key my/openrouter-key
                          :models '(openai/gpt-3.5-turbo
                                    anthropic/claude-3.5-sonnet
                                    google/gemini-pro))))
#+end_src

** aider
[[https://github.com/MatthewZMD/aidermacs][aidermacs]] - AI Pair Programming in Emacs with Aider

#+begin_src emacs-lisp
  (use-package aidermacs
    :defer t
    :bind
    (("C-c a" . aidermacs-transient-menu))
    :config
    (setenv "OPENROUTER_API_KEY" my/openrouter-key)
    (setq aidermacs-default-model "openrouter/anthropic/claude-3.7-sonnet"
          aidermacs-backend 'vterm
          aidermacs-watch-files t))
#+end_src


* Initial buffers (homemade dashboard)
#+begin_src emacs-lisp
  (defun setup-initial-buffers ()
    "Open inbox.org and todo.org at the start"
    (interactive)
    (find-file "~/org/inbox.org")
    (split-window-right)
    (find-file "~/org/todo.org"))

  (add-hook 'after-init-hook 'setup-initial-buffers)
#+end_src


* Tangle and compile configuration on save
Automatically tangle ~config.org~ file when saving.

#+begin_src emacs-lisp
  (defun my/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name) (expand-file-name "~/.emacs.d/config.org"))
      (message "** Tangle config.org file...")
      (let ((org-config-babel-evaluate nil))
        (org-babel-tangle))))


  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'after-save-hook #'my/org-babel-tangle-config)))
#+end_src
