#+title: Emacs configuration
#+author: Marco Dalla Stella
#+created: <2022-10-14 Fri>
#+property: header-args:emacs-lisp :result silent :tangle ./init.el
#+startup: fold

* Early init file
See [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html][Early Init File]] on Emacs manual.

#+begin_src emacs-lisp :tangle ./early-init.el
  ;;; early-init.el --- Early Init File -*- lexical-binding: t -*-

  ;; Do not resize the frame at this early stage.
  (setq frame-inhibit-implied-resize t)

  ;; Increase the garbage collector threshold
  (setq gc-cons-threshold most-positive-fixnum)

  ;; Disable some stuff
  (setq inhibit-startup-screen t
        inhibit-startup-message t
        inhibit-startup-buffer-menu t
        visual-bell t)
#+end_src


* Init
** File header
#+begin_src emacs-lisp
  ;;; init.el --- Emacs configuration -*- lexical-binding: t -*-
#+end_src

** Startup Performance
Measure the startup time.

#+begin_src emacs-lisp
  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
      (lambda ()
        (message "*** Emacs loaded in %s seconds with %d garbage collections."
           (emacs-init-time "%.2f")
           gcs-done)))
#+end_src

** Native compilation
Native compilation tweaks.

#+begin_src emacs-lisp
  ;; Silence compiler warnings as they can be pretty disruptive
  (setq native-comp-async-report-warnings-errors nil
        byte-compile-warnings nil)
#+end_src

** Package management
Just good old [[https://github.com/jwiegley/use-package][use-package]] and [[https://github.com/slotThe/vc-use-package][vc-use-package]]:

#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("elpa" . "https://elpa.gnu.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")
                           ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

  (setq use-package-always-ensure t
        package-native-compile t)

  (unless (package-installed-p 'vc-use-package)
    (package-vc-install "https://github.com/slotThe/vc-use-package"))

  (use-package vc-use-package
    :ensure nil)

  (use-package use-package-ensure-system-package)
#+end_src

** Benchmark init
#+begin_src emacs-lisp
  (use-package benchmark-init
    :config
    (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+end_src
** Keep .emacs.d nice and clean
Use =no-littering= to keep our directory clean.

#+begin_src emacs-lisp
  ;; Keep .emacs.d clean
  (use-package no-littering
    :config
    (require 'recentf)
    (add-to-list 'recentf-exclude no-littering-var-directory)

    (setq create-lockfiles nil
    delete-old-versions t
    kept-new-versions 6
    kept-old-versions 2
    version-control t)
#+end_src

Store backups and autosave files in ~/tmp~.

#+begin_src emacs-lisp
  (setq backup-directory-alist
      `((".*" . ,(no-littering-expand-var-file-name "backup/")))
      auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))
#+end_src

** Garbage collector magic hack
#+begin_src emacs-lisp
  (use-package gcmh
    :custom
    (gcmh-idle-delay 1000)
    (gcmh-high-cons-threshold (* 16 1024 1024)) ;; 16 MB
    :hook
    (after-init . gcmh-mode))
#+end_src

** Set custom file
#+begin_src emacs-lisp
  ;; My custom file
  (message "Loading custom-file...")
  (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

** Load "secret" files
#+begin_src emacs-lisp
  ;; My secrets
  (let ((secret.el (expand-file-name ".secrets/.secret.el.gpg" user-emacs-directory)))
    (when (file-exists-p secret.el)
      (load-library secret.el)))

  (let ((authinfo.gpg (expand-file-name ".secrets/.authinfo.gpg" user-emacs-directory)))
    (setq auth-sources `((:source ,authinfo.gpg))))
#+end_src

** Early UI settings
Disable those UI stuff that I don't need.

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (blink-cursor-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

Maximize windows by default.

#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook 'toggle-frame-maximized)
#+end_src



* General settings
** My personal information
#+begin_src emacs-lisp
  (setq user-full-name "Marco Dalla Stella"
        user-mail-address "marco@dallastella.name")
#+end_src
** Access to shell PATH
Ensure environment variables inside Emacs look the same as in the
user’s shell.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-initialize))
#+end_src

** Save history
#+begin_src emacs-lisp
  (use-package savehist
    :ensure nil
    :config
    (setq history-length 10000
        history-delete-duplicates t
        savehist-save-minibuffer-history t
        savehist-additional-variables '(kill-ring
                                        search-ring
                                        regexp-search-ring))
    (savehist-mode t))
#+end_src

** Auto Revert
Automatically reload changes on a file if needed.

#+begin_src emacs-lisp
  (use-package autorevert
    :ensure nil
    :config
    (setq global-auto-revert-non-file-buffers t)
    (global-auto-revert-mode t))
#+end_src

** Recent files
Save recent files

#+begin_src emacs-lisp
  (use-package recentf
    :ensure nil
    :config
    (setq recentf-max-saved-items 50
    recentf-max-menu-items 15))
#+end_src

** Unbind Ctrl-z
I don't like to hide Emacs.

#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z"))
#+end_src

** Scratch buffer
Use `emacs-lisp-mode’ instead of `lisp-interaction-mode’ for scratch
buffer.

#+begin_src emacs-lisp
  (setq initial-major-mode 'emacs-lisp-mode
        initial-scratch-message ";; Happy coding!\n\n")
#+end_src

** Delete moves to trash
Move deleted files to trash, you never know...

#+begin_src emacs-lisp
  (setq delete-by-moving-to-trash t)
#+end_src


* Keybindings
The most frequent keybindings are structured in a mnemonic way for
me. ~C-c~ is the "leader", then a letter that identify the scope: ~c~
for generic functions, ~b~ for buffer, ~d~ for directories, ~f~ for
files, ~p~ for projects, ~m~ for the active major-modes and so on.

** ESC cancel all
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** general.el
For this purpose I use [[https://github.com/noctuid/general.el][general.el]].

#+begin_src emacs-lisp
  (use-package general
    :commands general-create-definer)

  (general-create-definer my/leader-key
    :prefix "C-c")

  (defun my/open-config ()
      "Open the current Emacs configuration."
      (interactive)
      (find-file (expand-file-name "config.org" user-emacs-directory)))

  (defun my/ibuffer ()
    (interactive)
    (ibuffer t))

  (my/leader-key
    ;; Generic
    "." 'set-mark-command
    ;; Buffers (b)
    "b" '(:ignore t :wk "Buffers")
    "bw" '(save-buffer :wk "Write")
    "bk" '(kill-this-buffer :wk "Kill this buffer")
    "bK" '(kill-buffer :wk "Kill a buffer")
    "bR" '(revert-buffer :wk "Revert this buffer")
    "bl" '(my/ibuffer :wk "List buffers")
    ;; Files (f)
    "f" '(:ignore t :wk "Files")
    "ff" '(find-file :wk "Find file")
    "fd" '(dired :wk "Open Dired")
    "fP" '(my/open-config :wk "Open emacs.org")
    ;; Utility (u)
    "u" '(:ignore t :wk "Utility")
    "ub" 'browse-url-at-point
    ;; Packages
    "up" '(:ignore t :wk "Packages")
    "upl" '(package-list-packages :wk "List packages")
    "upu" '(package-update-all :wk "Update packages")
    ;; Toggle (t)
    "t" '(:ignore t :wk "Toggle")
    "ts" '(flyspell-mode :wk "Flyspell")
    ;; Quit
    "qq" '(save-buffers-kill-emacs :wk "Save and quit"))
#+end_src

** which-key
[[https://github.com/justbur/emacs-which-key][Which-key]] – Emacs package that displays available keybindings in popup.

#+begin_src emacs-lisp
  (use-package which-key
    :diminish
    :config
    (setq which-key-sort-order 'which-key-key-order-alpha
          which-key-add-column-padding 1
          which-key-min-display-lines 6)
    (which-key-setup-side-window-bottom)
    (which-key-mode t))
#+end_src



* Editing
** Default fill-column
I use 80 characters.
#+begin_src emacs-lisp
  (setq-default fill-column 80)
  (auto-fill-mode t)
#+end_src

** Default coding system
#+begin_src emacs-lisp
  (set-charset-priority 'unicode)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq-default buffer-file-coding-system 'utf-8)
  (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
#+end_src

** Use spaces to indent, no tabs
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil           ; Never use tabs
                tab-always-indent 'complete    ; Indent or complete
                tab-width 2)                   ; Show eventual tabs as 4 spaces
#+end_src

** Deal with whitespaces
#+begin_src emacs-lisp
  (use-package whitespace
    :ensure nil
    :hook
    (before-save . whitespace-cleanup))
#+end_src

** Multiple cursors
[[https://github.com/magnars/multiple-cursors.el][Multiple cursors for Emacs]]

#+begin_src emacs-lisp
  (use-package multiple-cursors)

  ;; Keybindings
  (my/leader-key
    ">" '(:ignore t :which-key "Multiple cursors")
    ">n" 'mc/mark-next-like-this
    ">p" 'mc/mark-previous-like-this
    ">a" 'mc/mark-all-like-this
    ">>" 'mc/edit-lines)
#+end_src

** undo-fu
[[https://gitlab.com/ideasman42/emacs-undo-fu][Undo Fu]] - Simple, stable undo with redo for emacs.

#+begin_src emacs-lisp
  (use-package undo-fu
    :bind (("C-z" . undo-fu-only-undo)
           ("C-M-z" . undo-fu-only-redo)))
#+end_src

** wgrep
[[https://github.com/mhayashi1120/Emacs-wgrep][wgrep.el]] - allows you to edit a grep buffer and apply those changes
to the file buffer.

#+begin_src emacs-lisp
  (use-package wgrep)
#+end_src

** easy-kill
[[https://github.com/leoliu/easy-kill][easy-kill]]: Provide commands easy-kill and easy-mark to let users
kill or mark things easily.

#+begin_src emacs-lisp
  (use-package easy-kill
    :bind (([remap kill-ring-save] . easy-kill)
           ([remap mark-sexp] . easy-mark)))
#+end_src

** Parenthesis
*** Electric Pair
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Matching.html][Electric Pair]]: provides a way to easily insert matching
delimiters: parentheses, braces, brackets, etc.

 #+begin_src emacs-lisp
   (use-package elec-pair
     :ensure nil
     :hook
     (prog-mode . (lambda ()
                    (setq-local electric-pair-pairs
                                (append electric-pair-pairs '((?\{ . ?\}))))))
     :config
     (setq electric-pair-preserve-balance t
           electric-pair-delete-adjacent-pairs t)
     (electric-pair-mode))
 #+end_src

*** Puni
[[https://github.com/AmaiKinono/puni][Puni]]: soft deletion keeping the parentheses balanced.

#+begin_src emacs-lisp
  (use-package puni
    :commands puni-global-mode
    :bind*
    (:map puni-mode-map
          ("C-<right>" . puni-slurp-forward)
          ("C-<left>" . puni-barf-forward)
          ("C-<up>" . puni-raise))
    :init
    (puni-global-mode))
#+end_src

** yankpad
[[https://github.com/Kungsgeten/yankpad][yankpad]] - Paste snippets from an org-mode file
 #+begin_src emacs-lisp
   (use-package yasnippet
     :ensure t
     :config
     (setq yas-verbosity 1)
     (yas-global-mode))

   (use-package yankpad
     :ensure t
     :after yasnippet
     :config
     (setq yankpad-file (expand-file-name "yankpad.org" user-emacs-directory)))

   ;; Keybindings
   (my/leader-key
     "y" '(:ignore t :wk "Snippets")
     "yc" 'yankpad-set-category
     "ye" 'yankpad-edit
     "yi" 'yankpad-insert
     "ym" 'yankpad-map
     "yr" 'yankpad-reload
     "yx" 'yankpad-expand)
 #+END_SRC

** Sudo save
Edit files in sudo mode.

#+begin_src emacs-lisp
  ;; (use-package sudo-save)
#+end_src


* UI
** Frame title
Show the current buffer name and the full path of the file on the app
title bar.

#+begin_src emacs-lisp
  (setq-default frame-title-format "%b (%f)")
#+end_src

** Font setup
Set my favourite font

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :family "Iosevka Term SS14"
                      :weight 'normal
                      :height 120)

  (set-face-attribute 'variable-pitch nil
                      :family "Iosevka Aile"
                      :weight 'normal
                      :height 120)
#+end_src

** Theme
[[https://github.com/hlissner/emacs-doom-themes][Solarized theme by emacs-doom-themes]]

#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (load-theme 'doom-solarized-dark t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config)
    :custom-face
    (org-block ((t (:background nil))))
    (org-block-begin-line ((t (:background nil))))
    (org-block-end-line ((t (:background nil)))))
#+end_src

** Modeline
Modeline from [[https://github.com/seagle0128/doom-modeline][Doom]]
#+begin_src emacs-lisp
  (use-package minions
    :config
    (setq minions-direct '(cider-mode))
    (minions-mode))

  (use-package doom-modeline
    :hook
    (after-init . doom-modeline-mode)
    :config
    (setq doom-modeline-buffer-file-name-style 'buffer-name
          doom-modeline-minor-modes t
          doom-modeline-icon t
          doom-modeline-project-detection 'project
          doom-modeline-major-mode-color-icon t
          doom-modeline-height 15))
#+end_src

** Show matching parenthesis
#+begin_src emacs-lisp
  (use-package paren
    :config
    (setq show-paren-when-point-inside-paren t
          show-paren-when-point-in-periphery t)
    (show-paren-mode t))

  (use-package rainbow-delimiters
    :hook
    ((prog-mode cider-repl-mode) . rainbow-delimiters-mode))
#+end_src

** Use icons
[[https://github.com/domtronn/all-the-icons.el][all-the-icons.el]]: A utility package to collect various Icon Fonts and
propertize them within Emacs.

#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

[[https://github.com/iyefrat/all-the-icons-completion][all-the-icons-completion]]: adds icons to completion candidates using
the built in completion metadata functions.

#+begin_src emacs-lisp
  (use-package all-the-icons-completion
    :hook
    (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :config
    (all-the-icons-completion-mode))
#+end_src

** Increase line-spacing
#+begin_src emacs-lisp
  (setq-default line-spacing 0.2)
#+end_src

** Show column
#+begin_src emacs-lisp
  (column-number-mode)
#+end_src

** Prettify symbols
#+begin_src emacs-lisp
  (global-prettify-symbols-mode t)
#+end_src

** Window margins and line numbers
I like to have some space on the left and right edge of the window.

#+begin_src emacs-lisp
  (setq-default left-margin-width 3
                right-margin-width 3)
#+end_src

** Highlight the current line
#+begin_src emacs-lisp
  (global-hl-line-mode)
#+end_src

** Highlight uncommitted changes
Use the diff-hl package to highlight changed-and-uncommitted lines
when programming.

#+begin_src emacs-lisp
  (use-package diff-hl
    :hook ((magit-pre-refresh . diff-hl-magit-pre-refresh)
           (magit-post-refresh . diff-hl-magit-post-refresh))
    :config
    (global-diff-hl-mode))
#+end_src

** Symbol highlight
[[https://gitlab.com/ideasman42/emacs-idle-highlight-mode/][Idle Highligh Mode]]: Simple symbol highlighting package for Emacs.

#+begin_src emacs-lisp
  (use-package idle-highlight-mode
    :hook ((prog-mode text-mode) . idle-highlight-mode)
    :config (setq idle-highlight-idle-time 0.5))
#+end_src

** Emoji
[[https://github.com/iqbalansari/emacs-emojify][Emojify]]: an Emacs extension to display emojis. It can display
github style emojis like :smile: or plain ascii ones like :).

#+begin_src emacs-lisp
  (use-package emojify
    :hook
    (after-init . global-emojify-mode)
    :config
    (setq emojify-emoji-styles '(unicode github)
          emojify-inhibit-major-modes '()))
#+end_src

** ace-window
ace-window
#+begin_src emacs-lisp
  (use-package ace-window
    :bind
    ("M-o" . ace-window)
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)
          aw-dispatch-always t))
#+end_src


* Tools
** direnv
direnv is an extension for your shell. It augments existing shells
with a new feature that can load and unload environment variables
depending on the current directory.

#+begin_src emacs-lisp
  (use-package direnv
    :config
    (direnv-mode))

  (my/leader-key
    "uda" '(:ignore true :wk "Direnv")
    "uda" '(direnv-allow :wk "Allow"))
#+end_src

** Vertico, Orderless, Consult, Marginalia & Embark
*** Orderless
[[https://github.com/oantolin/orderless][Orderless]] provides an ~orderless~ completion style that divides the
pattern into space-separated components, and matches all the
components in any order.

 #+begin_src emacs-lisp
   (use-package orderless
     :config
     (setq completion-styles '(orderless partial-completion)
           completion-category-defaults nil
           completion-category-overrides nil))
 #+end_src
*** Vertico
[[https://github.com/minad/vertico][Vertico]]: provides a performant and minimalistic vertical completion UI
based on the default completion system.

 #+begin_src emacs-lisp
  (use-package vertico
    :config
    (vertico-mode))
 #+end_src

*** Consult
[[https://github.com/minad/consult][Consult]] provides practical commands based on the Emacs completion
function completing-read.

 #+begin_src emacs-lisp
   (use-package consult
     :bind
     (("M-g g" . consult-goto-line)
      ("M-g G" . consult-goto-line-numbers)
      ("M-g o" . consult-outline)
      ("M-g m" . consult-mark)
      ("M-g k" . consult-global-mark)
      ("C-c h" . consult-history))
     :config
     (recentf-mode t))

      ;; Keybindings
   (my/leader-key
     "bb" 'consult-buffer
     "cc" 'consult-imenu
     "ce" 'consult-compile-error
     "cf" 'consult-flymake
     "cr" 'consult-recent-file
     "cm" 'consult-mode-command
     "fg" 'consult-ripgrep)
 #+end_src

*** Marginalia
[[https://github.com/minad/marginalia][Marginalia]]: provides marks or annotations placed at the margin of the
page of a book or in this case helpful colorful annotations placed at
the margin of the minibuffer for your completion candidates.

 #+begin_src emacs-lisp
   (use-package marginalia
     :config
     (marginalia-mode))
 #+end_src

*** Embark
[[https://github.com/oantolin/embark/][Embark]]: provides a sort of right-click contextual menu for Emacs,
accessed through the embark-act command, offering you relevant actions
to use on a target determined by the context.

 #+begin_src emacs-lisp
   (use-package embark
     :bind
     (("C-." . embark-act)         ;; pick some comfortable binding
      ("M-." . embark-dwim)        ;; good alternative: M-.
      ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
     :config
     ;; Hide the mode line of the Embark live/completions buffers
     (add-to-list 'display-buffer-alist
                  '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                    nil
                    (window-parameters (mode-line-format . none))))
         (setq prefix-help-command #'embark-prefix-help-command))

   (use-package embark-consult
     :after (embark consult)
     :demand t
     :hook
     (embark-collect-mode . consult-preview-at-point-mode))
 #+end_src

** Spell checking
*** jinx
#+begin_src emacs-lisp
  (use-package jinx
    :hook
    (emacs-startup . global-jinx-mode)
    :config
    (setq jinx-languages "en_US it_IT")
    (my/leader-key
         "s" '(:ignore t :wk "Spell")
         "ss" '(jinx-correct :wk "Correct word")
         "sl" '(jinx-languages :wk "Switch language")))
#+end_src

** Completion
*** Company
#+begin_src emacs-lisp
  (use-package company
    :disabled t
    :config
    (setq company-idle-delay 0.5
          company-tooltip-align-annotations t
          company-search-regexp-function #'company-search-flex-regexp
          company-require-match 'never)
    :hook
    (after-init . global-company-mode))
#+end_src
*** corfu
Corfu enhances completion at point with a small completion popup.
#+begin_src emacs-lisp
  (use-package corfu
    :config
    (setq corfu-auto t)
    :init
    (global-corfu-mode))
#+end_src

*** hippie-expand
Use hippie-expand instead of dabbrev-expand.

#+begin_src emacs-lisp
  (use-package hippie-exp
    :bind* ("M-/" . hippie-expand))
#+end_src
** Perspective
The [[https://github.com/nex3/perspective-el][Perspective]] package provides multiple named workspace (or
"perspectives") in Emacs.

#+begin_src emacs-lisp
  (use-package perspective
    :config
    (my/leader-key
      "x" '(:ignore t :wk "Workspaces")
      "xx" '(persp-switch :wk "Switch workspace")
      "xr" '(persp-rename :wk "Rename workspace")
      "xk" '(persp-kill :wk "Kill workspace"))
    (setq persp-suppress-no-prefix-key-warning t
          persp-initial-frame-name "main"
          persp-state-default-file (no-littering-expand-etc-file-name "perspective-default"))
    (unless (equal persp-mode t)
      (persp-mode)
      (persp-state-load persp-state-default-file)))
#+end_src

** Helpful
[[https://github.com/Wilfred/helpful][Helpful]] is an alternative to the built-in Emacs help that provides
much more contextual information.

#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key))
#+end_src

** Dictionary
Use built-in dictionary-el.

#+begin_src emacs-lisp
  (use-package dictionary
    :ensure nil
    :config
    (my/leader-key
      "sd" 'dictionary-search)
    (set-face-attribute 'dictionary-word-definition-face nil
                        :family "Iosevka Aile"
                        :weight 'light)
    (setq dictionary-server "dict.org"
          dictionary-use-single-buffer t))
#+end_src

** vterm
vterm is fully-fledged terminal emulator inside GNU Emacs based on
libvterm.

#+begin_src emacs-lisp
  (use-package vterm
    :config
    (my/leader-key
      "tv" '(vterm :wk "Open terminal")))
#+end_src


* Programming
** Project
  Let's use the built-in module to manage different projects.

#+begin_src emacs-lisp
  (use-package project
    :ensure nil
    :commands project-roots)

  (my/leader-key
    "p" '(:keymap project-prefix-map :package project :wk "Project"))
#+end_src
** Git
*** Magit
[[https://github.com/magit/magit][Magit]] - A Git porcelain inside Emacs.

#+begin_src emacs-lisp
  (use-package magit
    :config
    (my/leader-key
      "g" '(:ignore t :wk "Magit")
      "gg" 'magit-status
      "gf" 'magit-fetch
      "gp" 'magit-pull
      "gb" 'magit-branch
      "gB" 'magit-blame
      "gr" 'vc-refresh-state
      "gl" 'magit-log)
    (setq magit-save-repository-buffers 'dontask
          magit-refs-show-commit-count 'all))
#+end_src
** eldoc
#+begin_src emacs-lisp
  (use-package eldoc
    :config
    (setq eldoc-echo-area-display-truncation-message nil
          eldoc-echo-area-use-multiline-p nil))
#+end_src
** Eglot
#+begin_src emacs-lisp
  (use-package eglot
    :config
    (setq eglot-send-changes-idle-time (* 60 60)
          read-process-output-max (* 1024 1024)
          eglot-extend-to-xref t)
    :hook
    ((eglot-manage-mode . (lambda () (eldoc-mode -1)))
     ((clojure-mode clojurescript-mode js2-mode rust-mode markdown-mode) . eglot-ensure)))

  (use-package consult-eglot
    :after 'eglot)

  (use-package jarchive
    :after 'eglot)

  (my/leader-key
    "l" '(:ignore t :wk "Eglot")
    "lr" 'eglot-rename
    "la" 'eglot-code-actions
    "ld" 'xref-find-definitions
    "le" 'eldoc-doc-buffer
    "ls" 'consult-eglot-symbols)
#+end_src

** Clojure/ClojureScript
Clojure settings for Emacs
*** Neil
[[https://github.com/babashka/neil][Neil]] - A CLI to add common aliases and features to deps.edn-based projects.

#+begin_src emacs-lisp
  (use-package neil
    :config
    (setq neil-prompt-for-version-p nil
          neil-inject-dep-to-project-p t))
#+end_src
*** Clojure development environment
 #+begin_src emacs-lisp
   (use-package cider
     :hook
     ((cider-mode . eldoc-mode)
      (clojure-mode . cider-mode)
      (clojure-mode . subword-mode)
      (cider-repl-mode . eldoc-mode)
      (cider-repl-mode . subword-mode)
      (cider-mode . cider-company-enable-fuzzy-completion)
      (cider-repl-mode . cider-company-enable-fuzzy-completion))
     :bind
     (:map clojure-mode-map
           ("C-c m l" . cider-load-all-project-ns)
           ("C-c m j" . cider-jack-in-clj)
           ("C-c m J" . cider-jack-in-cljs)
           ("C-c m d" . neil-find-clojure-package)
           :map cider-repl-mode-map
           ("C-c m l" . cider-repl-clear-buffer)
           ("RET" . cider-repl-newline-and-indent)
           ("C-<return>" . cider-repl-return))
     :config
     (setq cider-eldoc-display-for-symbol-at-point nil
           cider-font-lock-dynamically t
           cider-save-file-on-load t
           cider-repl-pop-to-buffer-on-connect 'display-only
           cider-repl-history-file (locate-user-emacs-file "cider-repl-history")
           cider-repl-display-help-banner nil))
 #+end_src
*** Clojure Flycheck
Flycheck using clj-kondo
 #+begin_src emacs-lisp
  (use-package flycheck-clj-kondo)
 #+end_src
*** Font-locking for Clojure mode
 #+begin_src emacs-lisp
  (use-package clojure-mode-extra-font-locking
    :after clojure-mode)
 #+end_src
*** Kaocha test runner
An emacs package for running Kaocha tests via CIDER.

 #+begin_src emacs-lisp
  (use-package kaocha-runner
    :after cider
    :bind
    (:map clojure-mode-map
          ("C-c k a" . kaocha-runner-run-all-tests)
          ("C-c k h" . kaocha-runner-hide-windows)
          ("C-c k r" . kaocha-runner-run-tests)
          ("C-c k t" . kaocha-runner-run-test-at-point)
          ("C-c k w" . kaocha-runner-show-warnings))
    :config
    (setq kaocha-runner-failure-win-min-height 20
          kaocha-runner-ongoing-tests-win-min-height 20
          kaocha-runner-output-win-max-height 20))
 #+end_src
*** Code formatting
I like my code to be formatted following standard conventions.
Thanks to [[https://manueluberti.eu/2022/10/27/cljformat.html][Manuel Uberti]].

#+begin_src emacs-lisp
  (defun my/cljfmt-format-buffer ()
    "Format current buffer with `cljfmt'."
    (when (derived-mode-p 'clojure-mode)
      (let* ((pr (project-root (project-current)))
             (cfg-dir (locate-dominating-file pr "cljfmt.edn"))
             (cfg-edn (expand-file-name "cljfmt.edn" cfg-dir))
             (cmd (if (file-exists-p cfg-edn)
                      (format "cljfmt -c %s %s" cfg-edn buffer-file-name)
                    (format "cljfmt %s" buffer-file-name))))
        (shell-command-to-string cmd))
      (revert-buffer t t)))

  (defun my/cider-format-buffer ()
    "Automatically format current buffer after saving."
    (add-hook 'after-save-hook #'my/cljfmt-format-buffer nil t))

  (add-hook 'cider-mode-hook #'my/cider-format-buffer)
#+end_src

** Rust
Use Rustic
#+begin_src emacs-lisp
  (use-package rustic
    :config
    (setq rustic-lsp-client 'eglot
          rustic-format-on-save nil))
#+end_src

** Javascript
[[https://github.com/mooz/js2-mode][js2-mode]]: Improved JavaScript editing mode for GNU Emacs.

#+begin_src emacs-lisp
  (use-package rjsx-mode
    :mode "\\.[mc]?js\\'"
    :mode "\\.es6\\'"
    :mode "\\.pac\\'"
    :interpreter "node"
    :config
    (setq js-chain-indent t
          ;; These have become standard in the JS community
          js2-basic-offset 2
          ;; Don't mishighlight shebang lines
          js2-skip-preprocessor-directives t
          ;; let flycheck handle this
          js2-mode-show-parse-errors nil
          js2-mode-show-strict-warnings nil
          ;; Flycheck provides these features, so disable them: conflicting with
          ;; the eslint settings.
          js2-strict-missing-semi-warning nil
          ;; maximum fontification
          js2-highlight-level 3
          js2-idle-timer-delay 0.15))
#+end_src
** HTML & CSS
[[https://github.com/fxbois/web-mode][web-mode]]: an emacs major mode for editing HTML files.

#+begin_src emacs-lisp
  (use-package web-mode
    :mode
    ("\\.njk\\'" "\\.tpl\\.php\\'" "\\.[agj]sp\\'" "\\.as[cp]x\\'"
     "\\.erb\\'" "\\.mustache\\'" "\\.djhtml\\'" "\\.[t]?html?\\'")
    :config
    (setq web-mode-markup-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2))
#+end_src
** YAML
#+begin_src emacs-lisp
  (use-package yaml-mode
    :defer t)
#+end_src
** JSON
#+begin_src emacs-lisp
  (use-package json-mode
    :defer t
    :mode "\\.json\\'"
    :bind
    (:map json-mode-map
          ("C-c C-j" . jq-interactively)))

  (use-package jq-mode
    :after json-mode)
#+end_src
** Docker
#+begin_src emacs-lisp
  (use-package docker :defer t)
  (use-package dockerfile-mode :defer t)
#+end_src


* Productivity
** org-mode
*** settings
#+begin_src emacs-lisp
  (use-package org
    :ensure nil
    :custom-face
    (org-block-begin-line ((t (:underline nil))))
    (org-block-end-line ((t (:overline nil))))
    :config
    (setq org-directory "~/org"
          org-agenda-files '("~/org/todo.org")
          org-use-speed-commands t
          org-image-actual-width '(600)
          org-archive-location "~/org/archive.org::datatree/"
          org-hide-emphasis-markers t
          org-agenda-skip-deadline-if-done t
          org-agenda-skip-scheduled-if-done t
          org-ellipsis " ↴"
          org-fontify-quote-and-verse-blocks t
          org-src-tab-acts-natively t))

  (defun my/org-agenda-view ()
    (interactive (org-agenda nil "a")))

  (my/leader-key
    "o" '(:ignore t :wk "Org-mode")
    "oo" '(org-capture :wk "Capture")
    "oa" '(my/org-agenda-view :wk "Agenda")
    "of" 'org-attach)
#+end_src

*** org-capture templates
#+begin_src emacs-lisp
  (setq org-capture-templates
        '(("t" "Todo" entry (file "todo.org")
           "* TODO %?\n" :empty-lines 1)
          ("T" "Todo and paste" entry (file "todo.org")
           "* TODO %?\n\n%x" :empty-lines 1)
          ("i" "Inbox" entry (file "inbox.org")
           "* %?\n" :empty-lines 1)
          ("I" "Inbox and paste" entry (file "inbox.org")
           "* %?\n\n%x" :empty-lines 1)))
#+end_src

*** org-modern
org-modern: This package implements a “modern” style for your Org buffers using
font locking and text properties.

#+begin_src emacs-lisp
  (use-package org-modern
    :hook
    (org-mode . org-modern-mode))
#+end_src

*** org-alert
org-alert is a simple notification package for org-mode.
#+begin_src emacs-lisp
  (use-package org-alert
    :disabled t
    :config
    (setq org-alert-interval 1800
          org-alert-notification-title "Org Reminder!"
          alert-default-style 'libnotify)
    (org-alert-enable))
#+end_src

** denote
[[https://protesilaos.com/emacs/denote][denote.el]] — Simple notes for Emacs with an efficient file-naming scheme.

#+begin_src emacs-lisp
  (use-package denote
    :config
    (setq denote-directory (expand-file-name "~/funes")
          denote-file-type 'markdown-yaml
          denote-infer-keywords t
          denote-sort-keywords t
          denote-prompts '(title)
          denote-date-prompt-use-org-read-date t)
    :hook (dired-mode . denote-dired-mode-in-directories))

  (use-package consult-notes
    :commands
    (consult-notes
     consult-notes-search-in-all-notes)
    :config
    (consult-notes-denote-mode t))

  (my/leader-key
    "n" '(:ignore t :wk "Notes")
    "no" '(consult-notes :wk "Note list")
    "nn" '(denote :wk "New note")
    "ni" '(denote-link-insert-link :wk "Link to note")
    "nl" '(denote-link-after-creating :"Create and link note")
    "nta" '(denote-keywords-add :wk "Add tag")
    "ntr" '(denote-keywords-add :wk "Remove tag"))
#+end_src

** zk
#+begin_src emacs-lisp
  (use-package zk
    :custom
    (zk-directory "~/funes")
    (zk-file-extension "md")
    :config
    (zk-setup-auto-link-buttons)
    (zk-setup-embark))

  ;; (setq zk-new-note-header-function nil
  ;;       zk-id-time-string-format nil)
#+end_src
** wakatime
[[https://wakatime.com/emacs][wakatime]] for [[https://wakapi.dev/][wakapi.dev]]
#+begin_src emacs-lisp
  (use-package wakatime-mode
    :config
    (global-wakatime-mode))
#+end_src

** wallabag
[[https://github.com/chenyanming/wallabag.el][Emacs Wallabag client.]]
#+begin_src emacs-lisp
  (use-package wallabag
    :defer t
    :ensure nil
    :quelpa (wallabag :fetcher github :repo "chenyanming/wallabag.el")
    :config
    (setq wallabag-host my/wallabag-host
          wallabag-username my/wallabag-username
          wallabag-password my/wallabag-password
          wallabag-clientid my/wallabag-clientid
          wallabag-secret my/wallabag-secret)
     ;; optional, auto refresh token, token should refresh every hour
    (run-with-timer 0 3540 'wallabag-request-token))
#+end_src

** mermaid
#+begin_src emacs-lisp
  (use-package mermaid-mode)
#+end_src

* Social
** Mastodon
#+begin_src emacs-lisp
  (use-package mastodon
    :config
    (setq mastodon-instance-url "https://functional.cafe"
          mastodon-active-user "mdallastella"))
#+end_src
** elfeed
[[https://github.com/skeeto/elfeed][Elfeed]] is an extensible web feed reader for Emacs.

#+begin_src emacs-lisp
  (use-package elfeed
    :commands (elfeed))

  (use-package elfeed-org
    :after elfeed
    :config
    (setq rmh-elfeed-org-files (list "~/org/feeds.org"))
    (elfeed-org))

  (use-package elfeed-goodies
    :after elfeed
    :config
    (elfeed-goodies/setup))
#+end_src


* Tangle configuration on save
Automatically tangle ~config.org~ file when saving.

#+begin_src emacs-lisp
  (defun my/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/config.org"))
      (message "** Tangle config.org file...")
      (let ((org-config-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'after-save-hook #'my/org-babel-tangle-config)))
#+end_src


* Packages to look at
** TODO Popper
Popper is a minor-mode to tame the flood of ephemeral windows Emacs
produces, while still keeping them within arm’s reach.
https://github.com/karthink/popper
** DONE Corfu
Corfu enhances completion at point with a small completion popup.
https://github.com/minad/corfu

** TODO Cape
Cape provides Completion At Point Extensions which can be used in
combination with the Corfu completion UI or the default completion UI.
https://github.com/minad/cape

** TODO Tempel
Tempel is a tiny template package for Emacs, which uses the syntax of the Emacs
Tempo library.
https://github.com/minad/tempel


* Inspirations for this configuration
- My old literate configuration: https://github.com/mdallastella/.emacs.d/tree/old
- David Wilson configuration: https://github.com/daviwil/dotfiles
- Jeremy Friesen configuration: https://github.com/jeremyf/dotemacs
